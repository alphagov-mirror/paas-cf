// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/servicequotas"
	"github.com/aws/aws-sdk-go/service/servicequotas/servicequotasiface"
)

type FakeServiceQuotasAPI struct {
	AssociateServiceQuotaTemplateStub        func(*servicequotas.AssociateServiceQuotaTemplateInput) (*servicequotas.AssociateServiceQuotaTemplateOutput, error)
	associateServiceQuotaTemplateMutex       sync.RWMutex
	associateServiceQuotaTemplateArgsForCall []struct {
		arg1 *servicequotas.AssociateServiceQuotaTemplateInput
	}
	associateServiceQuotaTemplateReturns struct {
		result1 *servicequotas.AssociateServiceQuotaTemplateOutput
		result2 error
	}
	associateServiceQuotaTemplateReturnsOnCall map[int]struct {
		result1 *servicequotas.AssociateServiceQuotaTemplateOutput
		result2 error
	}
	AssociateServiceQuotaTemplateRequestStub        func(*servicequotas.AssociateServiceQuotaTemplateInput) (*request.Request, *servicequotas.AssociateServiceQuotaTemplateOutput)
	associateServiceQuotaTemplateRequestMutex       sync.RWMutex
	associateServiceQuotaTemplateRequestArgsForCall []struct {
		arg1 *servicequotas.AssociateServiceQuotaTemplateInput
	}
	associateServiceQuotaTemplateRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.AssociateServiceQuotaTemplateOutput
	}
	associateServiceQuotaTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.AssociateServiceQuotaTemplateOutput
	}
	AssociateServiceQuotaTemplateWithContextStub        func(context.Context, *servicequotas.AssociateServiceQuotaTemplateInput, ...request.Option) (*servicequotas.AssociateServiceQuotaTemplateOutput, error)
	associateServiceQuotaTemplateWithContextMutex       sync.RWMutex
	associateServiceQuotaTemplateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.AssociateServiceQuotaTemplateInput
		arg3 []request.Option
	}
	associateServiceQuotaTemplateWithContextReturns struct {
		result1 *servicequotas.AssociateServiceQuotaTemplateOutput
		result2 error
	}
	associateServiceQuotaTemplateWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.AssociateServiceQuotaTemplateOutput
		result2 error
	}
	DeleteServiceQuotaIncreaseRequestFromTemplateStub        func(*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput) (*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, error)
	deleteServiceQuotaIncreaseRequestFromTemplateMutex       sync.RWMutex
	deleteServiceQuotaIncreaseRequestFromTemplateArgsForCall []struct {
		arg1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput
	}
	deleteServiceQuotaIncreaseRequestFromTemplateReturns struct {
		result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}
	deleteServiceQuotaIncreaseRequestFromTemplateReturnsOnCall map[int]struct {
		result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}
	DeleteServiceQuotaIncreaseRequestFromTemplateRequestStub        func(*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput) (*request.Request, *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput)
	deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex       sync.RWMutex
	deleteServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall []struct {
		arg1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput
	}
	deleteServiceQuotaIncreaseRequestFromTemplateRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
	}
	deleteServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
	}
	DeleteServiceQuotaIncreaseRequestFromTemplateWithContextStub        func(context.Context, *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput, ...request.Option) (*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, error)
	deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex       sync.RWMutex
	deleteServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput
		arg3 []request.Option
	}
	deleteServiceQuotaIncreaseRequestFromTemplateWithContextReturns struct {
		result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}
	deleteServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}
	DisassociateServiceQuotaTemplateStub        func(*servicequotas.DisassociateServiceQuotaTemplateInput) (*servicequotas.DisassociateServiceQuotaTemplateOutput, error)
	disassociateServiceQuotaTemplateMutex       sync.RWMutex
	disassociateServiceQuotaTemplateArgsForCall []struct {
		arg1 *servicequotas.DisassociateServiceQuotaTemplateInput
	}
	disassociateServiceQuotaTemplateReturns struct {
		result1 *servicequotas.DisassociateServiceQuotaTemplateOutput
		result2 error
	}
	disassociateServiceQuotaTemplateReturnsOnCall map[int]struct {
		result1 *servicequotas.DisassociateServiceQuotaTemplateOutput
		result2 error
	}
	DisassociateServiceQuotaTemplateRequestStub        func(*servicequotas.DisassociateServiceQuotaTemplateInput) (*request.Request, *servicequotas.DisassociateServiceQuotaTemplateOutput)
	disassociateServiceQuotaTemplateRequestMutex       sync.RWMutex
	disassociateServiceQuotaTemplateRequestArgsForCall []struct {
		arg1 *servicequotas.DisassociateServiceQuotaTemplateInput
	}
	disassociateServiceQuotaTemplateRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.DisassociateServiceQuotaTemplateOutput
	}
	disassociateServiceQuotaTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.DisassociateServiceQuotaTemplateOutput
	}
	DisassociateServiceQuotaTemplateWithContextStub        func(context.Context, *servicequotas.DisassociateServiceQuotaTemplateInput, ...request.Option) (*servicequotas.DisassociateServiceQuotaTemplateOutput, error)
	disassociateServiceQuotaTemplateWithContextMutex       sync.RWMutex
	disassociateServiceQuotaTemplateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.DisassociateServiceQuotaTemplateInput
		arg3 []request.Option
	}
	disassociateServiceQuotaTemplateWithContextReturns struct {
		result1 *servicequotas.DisassociateServiceQuotaTemplateOutput
		result2 error
	}
	disassociateServiceQuotaTemplateWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.DisassociateServiceQuotaTemplateOutput
		result2 error
	}
	GetAWSDefaultServiceQuotaStub        func(*servicequotas.GetAWSDefaultServiceQuotaInput) (*servicequotas.GetAWSDefaultServiceQuotaOutput, error)
	getAWSDefaultServiceQuotaMutex       sync.RWMutex
	getAWSDefaultServiceQuotaArgsForCall []struct {
		arg1 *servicequotas.GetAWSDefaultServiceQuotaInput
	}
	getAWSDefaultServiceQuotaReturns struct {
		result1 *servicequotas.GetAWSDefaultServiceQuotaOutput
		result2 error
	}
	getAWSDefaultServiceQuotaReturnsOnCall map[int]struct {
		result1 *servicequotas.GetAWSDefaultServiceQuotaOutput
		result2 error
	}
	GetAWSDefaultServiceQuotaRequestStub        func(*servicequotas.GetAWSDefaultServiceQuotaInput) (*request.Request, *servicequotas.GetAWSDefaultServiceQuotaOutput)
	getAWSDefaultServiceQuotaRequestMutex       sync.RWMutex
	getAWSDefaultServiceQuotaRequestArgsForCall []struct {
		arg1 *servicequotas.GetAWSDefaultServiceQuotaInput
	}
	getAWSDefaultServiceQuotaRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.GetAWSDefaultServiceQuotaOutput
	}
	getAWSDefaultServiceQuotaRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.GetAWSDefaultServiceQuotaOutput
	}
	GetAWSDefaultServiceQuotaWithContextStub        func(context.Context, *servicequotas.GetAWSDefaultServiceQuotaInput, ...request.Option) (*servicequotas.GetAWSDefaultServiceQuotaOutput, error)
	getAWSDefaultServiceQuotaWithContextMutex       sync.RWMutex
	getAWSDefaultServiceQuotaWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.GetAWSDefaultServiceQuotaInput
		arg3 []request.Option
	}
	getAWSDefaultServiceQuotaWithContextReturns struct {
		result1 *servicequotas.GetAWSDefaultServiceQuotaOutput
		result2 error
	}
	getAWSDefaultServiceQuotaWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.GetAWSDefaultServiceQuotaOutput
		result2 error
	}
	GetAssociationForServiceQuotaTemplateStub        func(*servicequotas.GetAssociationForServiceQuotaTemplateInput) (*servicequotas.GetAssociationForServiceQuotaTemplateOutput, error)
	getAssociationForServiceQuotaTemplateMutex       sync.RWMutex
	getAssociationForServiceQuotaTemplateArgsForCall []struct {
		arg1 *servicequotas.GetAssociationForServiceQuotaTemplateInput
	}
	getAssociationForServiceQuotaTemplateReturns struct {
		result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
		result2 error
	}
	getAssociationForServiceQuotaTemplateReturnsOnCall map[int]struct {
		result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
		result2 error
	}
	GetAssociationForServiceQuotaTemplateRequestStub        func(*servicequotas.GetAssociationForServiceQuotaTemplateInput) (*request.Request, *servicequotas.GetAssociationForServiceQuotaTemplateOutput)
	getAssociationForServiceQuotaTemplateRequestMutex       sync.RWMutex
	getAssociationForServiceQuotaTemplateRequestArgsForCall []struct {
		arg1 *servicequotas.GetAssociationForServiceQuotaTemplateInput
	}
	getAssociationForServiceQuotaTemplateRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
	}
	getAssociationForServiceQuotaTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
	}
	GetAssociationForServiceQuotaTemplateWithContextStub        func(context.Context, *servicequotas.GetAssociationForServiceQuotaTemplateInput, ...request.Option) (*servicequotas.GetAssociationForServiceQuotaTemplateOutput, error)
	getAssociationForServiceQuotaTemplateWithContextMutex       sync.RWMutex
	getAssociationForServiceQuotaTemplateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.GetAssociationForServiceQuotaTemplateInput
		arg3 []request.Option
	}
	getAssociationForServiceQuotaTemplateWithContextReturns struct {
		result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
		result2 error
	}
	getAssociationForServiceQuotaTemplateWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
		result2 error
	}
	GetRequestedServiceQuotaChangeStub        func(*servicequotas.GetRequestedServiceQuotaChangeInput) (*servicequotas.GetRequestedServiceQuotaChangeOutput, error)
	getRequestedServiceQuotaChangeMutex       sync.RWMutex
	getRequestedServiceQuotaChangeArgsForCall []struct {
		arg1 *servicequotas.GetRequestedServiceQuotaChangeInput
	}
	getRequestedServiceQuotaChangeReturns struct {
		result1 *servicequotas.GetRequestedServiceQuotaChangeOutput
		result2 error
	}
	getRequestedServiceQuotaChangeReturnsOnCall map[int]struct {
		result1 *servicequotas.GetRequestedServiceQuotaChangeOutput
		result2 error
	}
	GetRequestedServiceQuotaChangeRequestStub        func(*servicequotas.GetRequestedServiceQuotaChangeInput) (*request.Request, *servicequotas.GetRequestedServiceQuotaChangeOutput)
	getRequestedServiceQuotaChangeRequestMutex       sync.RWMutex
	getRequestedServiceQuotaChangeRequestArgsForCall []struct {
		arg1 *servicequotas.GetRequestedServiceQuotaChangeInput
	}
	getRequestedServiceQuotaChangeRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.GetRequestedServiceQuotaChangeOutput
	}
	getRequestedServiceQuotaChangeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.GetRequestedServiceQuotaChangeOutput
	}
	GetRequestedServiceQuotaChangeWithContextStub        func(context.Context, *servicequotas.GetRequestedServiceQuotaChangeInput, ...request.Option) (*servicequotas.GetRequestedServiceQuotaChangeOutput, error)
	getRequestedServiceQuotaChangeWithContextMutex       sync.RWMutex
	getRequestedServiceQuotaChangeWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.GetRequestedServiceQuotaChangeInput
		arg3 []request.Option
	}
	getRequestedServiceQuotaChangeWithContextReturns struct {
		result1 *servicequotas.GetRequestedServiceQuotaChangeOutput
		result2 error
	}
	getRequestedServiceQuotaChangeWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.GetRequestedServiceQuotaChangeOutput
		result2 error
	}
	GetServiceQuotaStub        func(*servicequotas.GetServiceQuotaInput) (*servicequotas.GetServiceQuotaOutput, error)
	getServiceQuotaMutex       sync.RWMutex
	getServiceQuotaArgsForCall []struct {
		arg1 *servicequotas.GetServiceQuotaInput
	}
	getServiceQuotaReturns struct {
		result1 *servicequotas.GetServiceQuotaOutput
		result2 error
	}
	getServiceQuotaReturnsOnCall map[int]struct {
		result1 *servicequotas.GetServiceQuotaOutput
		result2 error
	}
	GetServiceQuotaIncreaseRequestFromTemplateStub        func(*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput) (*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, error)
	getServiceQuotaIncreaseRequestFromTemplateMutex       sync.RWMutex
	getServiceQuotaIncreaseRequestFromTemplateArgsForCall []struct {
		arg1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput
	}
	getServiceQuotaIncreaseRequestFromTemplateReturns struct {
		result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}
	getServiceQuotaIncreaseRequestFromTemplateReturnsOnCall map[int]struct {
		result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}
	GetServiceQuotaIncreaseRequestFromTemplateRequestStub        func(*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput) (*request.Request, *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput)
	getServiceQuotaIncreaseRequestFromTemplateRequestMutex       sync.RWMutex
	getServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall []struct {
		arg1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput
	}
	getServiceQuotaIncreaseRequestFromTemplateRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
	}
	getServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
	}
	GetServiceQuotaIncreaseRequestFromTemplateWithContextStub        func(context.Context, *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput, ...request.Option) (*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, error)
	getServiceQuotaIncreaseRequestFromTemplateWithContextMutex       sync.RWMutex
	getServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput
		arg3 []request.Option
	}
	getServiceQuotaIncreaseRequestFromTemplateWithContextReturns struct {
		result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}
	getServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}
	GetServiceQuotaRequestStub        func(*servicequotas.GetServiceQuotaInput) (*request.Request, *servicequotas.GetServiceQuotaOutput)
	getServiceQuotaRequestMutex       sync.RWMutex
	getServiceQuotaRequestArgsForCall []struct {
		arg1 *servicequotas.GetServiceQuotaInput
	}
	getServiceQuotaRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.GetServiceQuotaOutput
	}
	getServiceQuotaRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.GetServiceQuotaOutput
	}
	GetServiceQuotaWithContextStub        func(context.Context, *servicequotas.GetServiceQuotaInput, ...request.Option) (*servicequotas.GetServiceQuotaOutput, error)
	getServiceQuotaWithContextMutex       sync.RWMutex
	getServiceQuotaWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.GetServiceQuotaInput
		arg3 []request.Option
	}
	getServiceQuotaWithContextReturns struct {
		result1 *servicequotas.GetServiceQuotaOutput
		result2 error
	}
	getServiceQuotaWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.GetServiceQuotaOutput
		result2 error
	}
	ListAWSDefaultServiceQuotasStub        func(*servicequotas.ListAWSDefaultServiceQuotasInput) (*servicequotas.ListAWSDefaultServiceQuotasOutput, error)
	listAWSDefaultServiceQuotasMutex       sync.RWMutex
	listAWSDefaultServiceQuotasArgsForCall []struct {
		arg1 *servicequotas.ListAWSDefaultServiceQuotasInput
	}
	listAWSDefaultServiceQuotasReturns struct {
		result1 *servicequotas.ListAWSDefaultServiceQuotasOutput
		result2 error
	}
	listAWSDefaultServiceQuotasReturnsOnCall map[int]struct {
		result1 *servicequotas.ListAWSDefaultServiceQuotasOutput
		result2 error
	}
	ListAWSDefaultServiceQuotasPagesStub        func(*servicequotas.ListAWSDefaultServiceQuotasInput, func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool) error
	listAWSDefaultServiceQuotasPagesMutex       sync.RWMutex
	listAWSDefaultServiceQuotasPagesArgsForCall []struct {
		arg1 *servicequotas.ListAWSDefaultServiceQuotasInput
		arg2 func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool
	}
	listAWSDefaultServiceQuotasPagesReturns struct {
		result1 error
	}
	listAWSDefaultServiceQuotasPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListAWSDefaultServiceQuotasPagesWithContextStub        func(context.Context, *servicequotas.ListAWSDefaultServiceQuotasInput, func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool, ...request.Option) error
	listAWSDefaultServiceQuotasPagesWithContextMutex       sync.RWMutex
	listAWSDefaultServiceQuotasPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListAWSDefaultServiceQuotasInput
		arg3 func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool
		arg4 []request.Option
	}
	listAWSDefaultServiceQuotasPagesWithContextReturns struct {
		result1 error
	}
	listAWSDefaultServiceQuotasPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAWSDefaultServiceQuotasRequestStub        func(*servicequotas.ListAWSDefaultServiceQuotasInput) (*request.Request, *servicequotas.ListAWSDefaultServiceQuotasOutput)
	listAWSDefaultServiceQuotasRequestMutex       sync.RWMutex
	listAWSDefaultServiceQuotasRequestArgsForCall []struct {
		arg1 *servicequotas.ListAWSDefaultServiceQuotasInput
	}
	listAWSDefaultServiceQuotasRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.ListAWSDefaultServiceQuotasOutput
	}
	listAWSDefaultServiceQuotasRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.ListAWSDefaultServiceQuotasOutput
	}
	ListAWSDefaultServiceQuotasWithContextStub        func(context.Context, *servicequotas.ListAWSDefaultServiceQuotasInput, ...request.Option) (*servicequotas.ListAWSDefaultServiceQuotasOutput, error)
	listAWSDefaultServiceQuotasWithContextMutex       sync.RWMutex
	listAWSDefaultServiceQuotasWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListAWSDefaultServiceQuotasInput
		arg3 []request.Option
	}
	listAWSDefaultServiceQuotasWithContextReturns struct {
		result1 *servicequotas.ListAWSDefaultServiceQuotasOutput
		result2 error
	}
	listAWSDefaultServiceQuotasWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.ListAWSDefaultServiceQuotasOutput
		result2 error
	}
	ListRequestedServiceQuotaChangeHistoryStub        func(*servicequotas.ListRequestedServiceQuotaChangeHistoryInput) (*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, error)
	listRequestedServiceQuotaChangeHistoryMutex       sync.RWMutex
	listRequestedServiceQuotaChangeHistoryArgsForCall []struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput
	}
	listRequestedServiceQuotaChangeHistoryReturns struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
		result2 error
	}
	listRequestedServiceQuotaChangeHistoryReturnsOnCall map[int]struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
		result2 error
	}
	ListRequestedServiceQuotaChangeHistoryByQuotaStub        func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput) (*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, error)
	listRequestedServiceQuotaChangeHistoryByQuotaMutex       sync.RWMutex
	listRequestedServiceQuotaChangeHistoryByQuotaArgsForCall []struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput
	}
	listRequestedServiceQuotaChangeHistoryByQuotaReturns struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
		result2 error
	}
	listRequestedServiceQuotaChangeHistoryByQuotaReturnsOnCall map[int]struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
		result2 error
	}
	ListRequestedServiceQuotaChangeHistoryByQuotaPagesStub        func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool) error
	listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex       sync.RWMutex
	listRequestedServiceQuotaChangeHistoryByQuotaPagesArgsForCall []struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput
		arg2 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool
	}
	listRequestedServiceQuotaChangeHistoryByQuotaPagesReturns struct {
		result1 error
	}
	listRequestedServiceQuotaChangeHistoryByQuotaPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextStub        func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool, ...request.Option) error
	listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex       sync.RWMutex
	listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput
		arg3 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool
		arg4 []request.Option
	}
	listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextReturns struct {
		result1 error
	}
	listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListRequestedServiceQuotaChangeHistoryByQuotaRequestStub        func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput) (*request.Request, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput)
	listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex       sync.RWMutex
	listRequestedServiceQuotaChangeHistoryByQuotaRequestArgsForCall []struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput
	}
	listRequestedServiceQuotaChangeHistoryByQuotaRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
	}
	listRequestedServiceQuotaChangeHistoryByQuotaRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
	}
	ListRequestedServiceQuotaChangeHistoryByQuotaWithContextStub        func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, ...request.Option) (*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, error)
	listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex       sync.RWMutex
	listRequestedServiceQuotaChangeHistoryByQuotaWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput
		arg3 []request.Option
	}
	listRequestedServiceQuotaChangeHistoryByQuotaWithContextReturns struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
		result2 error
	}
	listRequestedServiceQuotaChangeHistoryByQuotaWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
		result2 error
	}
	ListRequestedServiceQuotaChangeHistoryPagesStub        func(*servicequotas.ListRequestedServiceQuotaChangeHistoryInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool) error
	listRequestedServiceQuotaChangeHistoryPagesMutex       sync.RWMutex
	listRequestedServiceQuotaChangeHistoryPagesArgsForCall []struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput
		arg2 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool
	}
	listRequestedServiceQuotaChangeHistoryPagesReturns struct {
		result1 error
	}
	listRequestedServiceQuotaChangeHistoryPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListRequestedServiceQuotaChangeHistoryPagesWithContextStub        func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool, ...request.Option) error
	listRequestedServiceQuotaChangeHistoryPagesWithContextMutex       sync.RWMutex
	listRequestedServiceQuotaChangeHistoryPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput
		arg3 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool
		arg4 []request.Option
	}
	listRequestedServiceQuotaChangeHistoryPagesWithContextReturns struct {
		result1 error
	}
	listRequestedServiceQuotaChangeHistoryPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListRequestedServiceQuotaChangeHistoryRequestStub        func(*servicequotas.ListRequestedServiceQuotaChangeHistoryInput) (*request.Request, *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput)
	listRequestedServiceQuotaChangeHistoryRequestMutex       sync.RWMutex
	listRequestedServiceQuotaChangeHistoryRequestArgsForCall []struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput
	}
	listRequestedServiceQuotaChangeHistoryRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
	}
	listRequestedServiceQuotaChangeHistoryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
	}
	ListRequestedServiceQuotaChangeHistoryWithContextStub        func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, ...request.Option) (*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, error)
	listRequestedServiceQuotaChangeHistoryWithContextMutex       sync.RWMutex
	listRequestedServiceQuotaChangeHistoryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput
		arg3 []request.Option
	}
	listRequestedServiceQuotaChangeHistoryWithContextReturns struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
		result2 error
	}
	listRequestedServiceQuotaChangeHistoryWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
		result2 error
	}
	ListServiceQuotaIncreaseRequestsInTemplateStub        func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput) (*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, error)
	listServiceQuotaIncreaseRequestsInTemplateMutex       sync.RWMutex
	listServiceQuotaIncreaseRequestsInTemplateArgsForCall []struct {
		arg1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput
	}
	listServiceQuotaIncreaseRequestsInTemplateReturns struct {
		result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
		result2 error
	}
	listServiceQuotaIncreaseRequestsInTemplateReturnsOnCall map[int]struct {
		result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
		result2 error
	}
	ListServiceQuotaIncreaseRequestsInTemplatePagesStub        func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool) error
	listServiceQuotaIncreaseRequestsInTemplatePagesMutex       sync.RWMutex
	listServiceQuotaIncreaseRequestsInTemplatePagesArgsForCall []struct {
		arg1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput
		arg2 func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool
	}
	listServiceQuotaIncreaseRequestsInTemplatePagesReturns struct {
		result1 error
	}
	listServiceQuotaIncreaseRequestsInTemplatePagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListServiceQuotaIncreaseRequestsInTemplatePagesWithContextStub        func(context.Context, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool, ...request.Option) error
	listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex       sync.RWMutex
	listServiceQuotaIncreaseRequestsInTemplatePagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput
		arg3 func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool
		arg4 []request.Option
	}
	listServiceQuotaIncreaseRequestsInTemplatePagesWithContextReturns struct {
		result1 error
	}
	listServiceQuotaIncreaseRequestsInTemplatePagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListServiceQuotaIncreaseRequestsInTemplateRequestStub        func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput) (*request.Request, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput)
	listServiceQuotaIncreaseRequestsInTemplateRequestMutex       sync.RWMutex
	listServiceQuotaIncreaseRequestsInTemplateRequestArgsForCall []struct {
		arg1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput
	}
	listServiceQuotaIncreaseRequestsInTemplateRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
	}
	listServiceQuotaIncreaseRequestsInTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
	}
	ListServiceQuotaIncreaseRequestsInTemplateWithContextStub        func(context.Context, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, ...request.Option) (*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, error)
	listServiceQuotaIncreaseRequestsInTemplateWithContextMutex       sync.RWMutex
	listServiceQuotaIncreaseRequestsInTemplateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput
		arg3 []request.Option
	}
	listServiceQuotaIncreaseRequestsInTemplateWithContextReturns struct {
		result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
		result2 error
	}
	listServiceQuotaIncreaseRequestsInTemplateWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
		result2 error
	}
	ListServiceQuotasStub        func(*servicequotas.ListServiceQuotasInput) (*servicequotas.ListServiceQuotasOutput, error)
	listServiceQuotasMutex       sync.RWMutex
	listServiceQuotasArgsForCall []struct {
		arg1 *servicequotas.ListServiceQuotasInput
	}
	listServiceQuotasReturns struct {
		result1 *servicequotas.ListServiceQuotasOutput
		result2 error
	}
	listServiceQuotasReturnsOnCall map[int]struct {
		result1 *servicequotas.ListServiceQuotasOutput
		result2 error
	}
	ListServiceQuotasPagesStub        func(*servicequotas.ListServiceQuotasInput, func(*servicequotas.ListServiceQuotasOutput, bool) bool) error
	listServiceQuotasPagesMutex       sync.RWMutex
	listServiceQuotasPagesArgsForCall []struct {
		arg1 *servicequotas.ListServiceQuotasInput
		arg2 func(*servicequotas.ListServiceQuotasOutput, bool) bool
	}
	listServiceQuotasPagesReturns struct {
		result1 error
	}
	listServiceQuotasPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListServiceQuotasPagesWithContextStub        func(context.Context, *servicequotas.ListServiceQuotasInput, func(*servicequotas.ListServiceQuotasOutput, bool) bool, ...request.Option) error
	listServiceQuotasPagesWithContextMutex       sync.RWMutex
	listServiceQuotasPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListServiceQuotasInput
		arg3 func(*servicequotas.ListServiceQuotasOutput, bool) bool
		arg4 []request.Option
	}
	listServiceQuotasPagesWithContextReturns struct {
		result1 error
	}
	listServiceQuotasPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListServiceQuotasRequestStub        func(*servicequotas.ListServiceQuotasInput) (*request.Request, *servicequotas.ListServiceQuotasOutput)
	listServiceQuotasRequestMutex       sync.RWMutex
	listServiceQuotasRequestArgsForCall []struct {
		arg1 *servicequotas.ListServiceQuotasInput
	}
	listServiceQuotasRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.ListServiceQuotasOutput
	}
	listServiceQuotasRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.ListServiceQuotasOutput
	}
	ListServiceQuotasWithContextStub        func(context.Context, *servicequotas.ListServiceQuotasInput, ...request.Option) (*servicequotas.ListServiceQuotasOutput, error)
	listServiceQuotasWithContextMutex       sync.RWMutex
	listServiceQuotasWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListServiceQuotasInput
		arg3 []request.Option
	}
	listServiceQuotasWithContextReturns struct {
		result1 *servicequotas.ListServiceQuotasOutput
		result2 error
	}
	listServiceQuotasWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.ListServiceQuotasOutput
		result2 error
	}
	ListServicesStub        func(*servicequotas.ListServicesInput) (*servicequotas.ListServicesOutput, error)
	listServicesMutex       sync.RWMutex
	listServicesArgsForCall []struct {
		arg1 *servicequotas.ListServicesInput
	}
	listServicesReturns struct {
		result1 *servicequotas.ListServicesOutput
		result2 error
	}
	listServicesReturnsOnCall map[int]struct {
		result1 *servicequotas.ListServicesOutput
		result2 error
	}
	ListServicesPagesStub        func(*servicequotas.ListServicesInput, func(*servicequotas.ListServicesOutput, bool) bool) error
	listServicesPagesMutex       sync.RWMutex
	listServicesPagesArgsForCall []struct {
		arg1 *servicequotas.ListServicesInput
		arg2 func(*servicequotas.ListServicesOutput, bool) bool
	}
	listServicesPagesReturns struct {
		result1 error
	}
	listServicesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListServicesPagesWithContextStub        func(context.Context, *servicequotas.ListServicesInput, func(*servicequotas.ListServicesOutput, bool) bool, ...request.Option) error
	listServicesPagesWithContextMutex       sync.RWMutex
	listServicesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListServicesInput
		arg3 func(*servicequotas.ListServicesOutput, bool) bool
		arg4 []request.Option
	}
	listServicesPagesWithContextReturns struct {
		result1 error
	}
	listServicesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListServicesRequestStub        func(*servicequotas.ListServicesInput) (*request.Request, *servicequotas.ListServicesOutput)
	listServicesRequestMutex       sync.RWMutex
	listServicesRequestArgsForCall []struct {
		arg1 *servicequotas.ListServicesInput
	}
	listServicesRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.ListServicesOutput
	}
	listServicesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.ListServicesOutput
	}
	ListServicesWithContextStub        func(context.Context, *servicequotas.ListServicesInput, ...request.Option) (*servicequotas.ListServicesOutput, error)
	listServicesWithContextMutex       sync.RWMutex
	listServicesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.ListServicesInput
		arg3 []request.Option
	}
	listServicesWithContextReturns struct {
		result1 *servicequotas.ListServicesOutput
		result2 error
	}
	listServicesWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.ListServicesOutput
		result2 error
	}
	PutServiceQuotaIncreaseRequestIntoTemplateStub        func(*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput) (*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, error)
	putServiceQuotaIncreaseRequestIntoTemplateMutex       sync.RWMutex
	putServiceQuotaIncreaseRequestIntoTemplateArgsForCall []struct {
		arg1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput
	}
	putServiceQuotaIncreaseRequestIntoTemplateReturns struct {
		result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
		result2 error
	}
	putServiceQuotaIncreaseRequestIntoTemplateReturnsOnCall map[int]struct {
		result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
		result2 error
	}
	PutServiceQuotaIncreaseRequestIntoTemplateRequestStub        func(*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput) (*request.Request, *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput)
	putServiceQuotaIncreaseRequestIntoTemplateRequestMutex       sync.RWMutex
	putServiceQuotaIncreaseRequestIntoTemplateRequestArgsForCall []struct {
		arg1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput
	}
	putServiceQuotaIncreaseRequestIntoTemplateRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
	}
	putServiceQuotaIncreaseRequestIntoTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
	}
	PutServiceQuotaIncreaseRequestIntoTemplateWithContextStub        func(context.Context, *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput, ...request.Option) (*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, error)
	putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex       sync.RWMutex
	putServiceQuotaIncreaseRequestIntoTemplateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput
		arg3 []request.Option
	}
	putServiceQuotaIncreaseRequestIntoTemplateWithContextReturns struct {
		result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
		result2 error
	}
	putServiceQuotaIncreaseRequestIntoTemplateWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
		result2 error
	}
	RequestServiceQuotaIncreaseStub        func(*servicequotas.RequestServiceQuotaIncreaseInput) (*servicequotas.RequestServiceQuotaIncreaseOutput, error)
	requestServiceQuotaIncreaseMutex       sync.RWMutex
	requestServiceQuotaIncreaseArgsForCall []struct {
		arg1 *servicequotas.RequestServiceQuotaIncreaseInput
	}
	requestServiceQuotaIncreaseReturns struct {
		result1 *servicequotas.RequestServiceQuotaIncreaseOutput
		result2 error
	}
	requestServiceQuotaIncreaseReturnsOnCall map[int]struct {
		result1 *servicequotas.RequestServiceQuotaIncreaseOutput
		result2 error
	}
	RequestServiceQuotaIncreaseRequestStub        func(*servicequotas.RequestServiceQuotaIncreaseInput) (*request.Request, *servicequotas.RequestServiceQuotaIncreaseOutput)
	requestServiceQuotaIncreaseRequestMutex       sync.RWMutex
	requestServiceQuotaIncreaseRequestArgsForCall []struct {
		arg1 *servicequotas.RequestServiceQuotaIncreaseInput
	}
	requestServiceQuotaIncreaseRequestReturns struct {
		result1 *request.Request
		result2 *servicequotas.RequestServiceQuotaIncreaseOutput
	}
	requestServiceQuotaIncreaseRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *servicequotas.RequestServiceQuotaIncreaseOutput
	}
	RequestServiceQuotaIncreaseWithContextStub        func(context.Context, *servicequotas.RequestServiceQuotaIncreaseInput, ...request.Option) (*servicequotas.RequestServiceQuotaIncreaseOutput, error)
	requestServiceQuotaIncreaseWithContextMutex       sync.RWMutex
	requestServiceQuotaIncreaseWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *servicequotas.RequestServiceQuotaIncreaseInput
		arg3 []request.Option
	}
	requestServiceQuotaIncreaseWithContextReturns struct {
		result1 *servicequotas.RequestServiceQuotaIncreaseOutput
		result2 error
	}
	requestServiceQuotaIncreaseWithContextReturnsOnCall map[int]struct {
		result1 *servicequotas.RequestServiceQuotaIncreaseOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplate(arg1 *servicequotas.AssociateServiceQuotaTemplateInput) (*servicequotas.AssociateServiceQuotaTemplateOutput, error) {
	fake.associateServiceQuotaTemplateMutex.Lock()
	ret, specificReturn := fake.associateServiceQuotaTemplateReturnsOnCall[len(fake.associateServiceQuotaTemplateArgsForCall)]
	fake.associateServiceQuotaTemplateArgsForCall = append(fake.associateServiceQuotaTemplateArgsForCall, struct {
		arg1 *servicequotas.AssociateServiceQuotaTemplateInput
	}{arg1})
	stub := fake.AssociateServiceQuotaTemplateStub
	fakeReturns := fake.associateServiceQuotaTemplateReturns
	fake.recordInvocation("AssociateServiceQuotaTemplate", []interface{}{arg1})
	fake.associateServiceQuotaTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateCallCount() int {
	fake.associateServiceQuotaTemplateMutex.RLock()
	defer fake.associateServiceQuotaTemplateMutex.RUnlock()
	return len(fake.associateServiceQuotaTemplateArgsForCall)
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateCalls(stub func(*servicequotas.AssociateServiceQuotaTemplateInput) (*servicequotas.AssociateServiceQuotaTemplateOutput, error)) {
	fake.associateServiceQuotaTemplateMutex.Lock()
	defer fake.associateServiceQuotaTemplateMutex.Unlock()
	fake.AssociateServiceQuotaTemplateStub = stub
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateArgsForCall(i int) *servicequotas.AssociateServiceQuotaTemplateInput {
	fake.associateServiceQuotaTemplateMutex.RLock()
	defer fake.associateServiceQuotaTemplateMutex.RUnlock()
	argsForCall := fake.associateServiceQuotaTemplateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateReturns(result1 *servicequotas.AssociateServiceQuotaTemplateOutput, result2 error) {
	fake.associateServiceQuotaTemplateMutex.Lock()
	defer fake.associateServiceQuotaTemplateMutex.Unlock()
	fake.AssociateServiceQuotaTemplateStub = nil
	fake.associateServiceQuotaTemplateReturns = struct {
		result1 *servicequotas.AssociateServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateReturnsOnCall(i int, result1 *servicequotas.AssociateServiceQuotaTemplateOutput, result2 error) {
	fake.associateServiceQuotaTemplateMutex.Lock()
	defer fake.associateServiceQuotaTemplateMutex.Unlock()
	fake.AssociateServiceQuotaTemplateStub = nil
	if fake.associateServiceQuotaTemplateReturnsOnCall == nil {
		fake.associateServiceQuotaTemplateReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.AssociateServiceQuotaTemplateOutput
			result2 error
		})
	}
	fake.associateServiceQuotaTemplateReturnsOnCall[i] = struct {
		result1 *servicequotas.AssociateServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateRequest(arg1 *servicequotas.AssociateServiceQuotaTemplateInput) (*request.Request, *servicequotas.AssociateServiceQuotaTemplateOutput) {
	fake.associateServiceQuotaTemplateRequestMutex.Lock()
	ret, specificReturn := fake.associateServiceQuotaTemplateRequestReturnsOnCall[len(fake.associateServiceQuotaTemplateRequestArgsForCall)]
	fake.associateServiceQuotaTemplateRequestArgsForCall = append(fake.associateServiceQuotaTemplateRequestArgsForCall, struct {
		arg1 *servicequotas.AssociateServiceQuotaTemplateInput
	}{arg1})
	stub := fake.AssociateServiceQuotaTemplateRequestStub
	fakeReturns := fake.associateServiceQuotaTemplateRequestReturns
	fake.recordInvocation("AssociateServiceQuotaTemplateRequest", []interface{}{arg1})
	fake.associateServiceQuotaTemplateRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateRequestCallCount() int {
	fake.associateServiceQuotaTemplateRequestMutex.RLock()
	defer fake.associateServiceQuotaTemplateRequestMutex.RUnlock()
	return len(fake.associateServiceQuotaTemplateRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateRequestCalls(stub func(*servicequotas.AssociateServiceQuotaTemplateInput) (*request.Request, *servicequotas.AssociateServiceQuotaTemplateOutput)) {
	fake.associateServiceQuotaTemplateRequestMutex.Lock()
	defer fake.associateServiceQuotaTemplateRequestMutex.Unlock()
	fake.AssociateServiceQuotaTemplateRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateRequestArgsForCall(i int) *servicequotas.AssociateServiceQuotaTemplateInput {
	fake.associateServiceQuotaTemplateRequestMutex.RLock()
	defer fake.associateServiceQuotaTemplateRequestMutex.RUnlock()
	argsForCall := fake.associateServiceQuotaTemplateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateRequestReturns(result1 *request.Request, result2 *servicequotas.AssociateServiceQuotaTemplateOutput) {
	fake.associateServiceQuotaTemplateRequestMutex.Lock()
	defer fake.associateServiceQuotaTemplateRequestMutex.Unlock()
	fake.AssociateServiceQuotaTemplateRequestStub = nil
	fake.associateServiceQuotaTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.AssociateServiceQuotaTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.AssociateServiceQuotaTemplateOutput) {
	fake.associateServiceQuotaTemplateRequestMutex.Lock()
	defer fake.associateServiceQuotaTemplateRequestMutex.Unlock()
	fake.AssociateServiceQuotaTemplateRequestStub = nil
	if fake.associateServiceQuotaTemplateRequestReturnsOnCall == nil {
		fake.associateServiceQuotaTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.AssociateServiceQuotaTemplateOutput
		})
	}
	fake.associateServiceQuotaTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.AssociateServiceQuotaTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateWithContext(arg1 context.Context, arg2 *servicequotas.AssociateServiceQuotaTemplateInput, arg3 ...request.Option) (*servicequotas.AssociateServiceQuotaTemplateOutput, error) {
	fake.associateServiceQuotaTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.associateServiceQuotaTemplateWithContextReturnsOnCall[len(fake.associateServiceQuotaTemplateWithContextArgsForCall)]
	fake.associateServiceQuotaTemplateWithContextArgsForCall = append(fake.associateServiceQuotaTemplateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.AssociateServiceQuotaTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AssociateServiceQuotaTemplateWithContextStub
	fakeReturns := fake.associateServiceQuotaTemplateWithContextReturns
	fake.recordInvocation("AssociateServiceQuotaTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateServiceQuotaTemplateWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateWithContextCallCount() int {
	fake.associateServiceQuotaTemplateWithContextMutex.RLock()
	defer fake.associateServiceQuotaTemplateWithContextMutex.RUnlock()
	return len(fake.associateServiceQuotaTemplateWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateWithContextCalls(stub func(context.Context, *servicequotas.AssociateServiceQuotaTemplateInput, ...request.Option) (*servicequotas.AssociateServiceQuotaTemplateOutput, error)) {
	fake.associateServiceQuotaTemplateWithContextMutex.Lock()
	defer fake.associateServiceQuotaTemplateWithContextMutex.Unlock()
	fake.AssociateServiceQuotaTemplateWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateWithContextArgsForCall(i int) (context.Context, *servicequotas.AssociateServiceQuotaTemplateInput, []request.Option) {
	fake.associateServiceQuotaTemplateWithContextMutex.RLock()
	defer fake.associateServiceQuotaTemplateWithContextMutex.RUnlock()
	argsForCall := fake.associateServiceQuotaTemplateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateWithContextReturns(result1 *servicequotas.AssociateServiceQuotaTemplateOutput, result2 error) {
	fake.associateServiceQuotaTemplateWithContextMutex.Lock()
	defer fake.associateServiceQuotaTemplateWithContextMutex.Unlock()
	fake.AssociateServiceQuotaTemplateWithContextStub = nil
	fake.associateServiceQuotaTemplateWithContextReturns = struct {
		result1 *servicequotas.AssociateServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) AssociateServiceQuotaTemplateWithContextReturnsOnCall(i int, result1 *servicequotas.AssociateServiceQuotaTemplateOutput, result2 error) {
	fake.associateServiceQuotaTemplateWithContextMutex.Lock()
	defer fake.associateServiceQuotaTemplateWithContextMutex.Unlock()
	fake.AssociateServiceQuotaTemplateWithContextStub = nil
	if fake.associateServiceQuotaTemplateWithContextReturnsOnCall == nil {
		fake.associateServiceQuotaTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.AssociateServiceQuotaTemplateOutput
			result2 error
		})
	}
	fake.associateServiceQuotaTemplateWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.AssociateServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplate(arg1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput) (*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, error) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.Lock()
	ret, specificReturn := fake.deleteServiceQuotaIncreaseRequestFromTemplateReturnsOnCall[len(fake.deleteServiceQuotaIncreaseRequestFromTemplateArgsForCall)]
	fake.deleteServiceQuotaIncreaseRequestFromTemplateArgsForCall = append(fake.deleteServiceQuotaIncreaseRequestFromTemplateArgsForCall, struct {
		arg1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput
	}{arg1})
	stub := fake.DeleteServiceQuotaIncreaseRequestFromTemplateStub
	fakeReturns := fake.deleteServiceQuotaIncreaseRequestFromTemplateReturns
	fake.recordInvocation("DeleteServiceQuotaIncreaseRequestFromTemplate", []interface{}{arg1})
	fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateCallCount() int {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.RLock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.RUnlock()
	return len(fake.deleteServiceQuotaIncreaseRequestFromTemplateArgsForCall)
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateCalls(stub func(*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput) (*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, error)) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.Lock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.Unlock()
	fake.DeleteServiceQuotaIncreaseRequestFromTemplateStub = stub
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateArgsForCall(i int) *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.RLock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.RUnlock()
	argsForCall := fake.deleteServiceQuotaIncreaseRequestFromTemplateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateReturns(result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, result2 error) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.Lock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.Unlock()
	fake.DeleteServiceQuotaIncreaseRequestFromTemplateStub = nil
	fake.deleteServiceQuotaIncreaseRequestFromTemplateReturns = struct {
		result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateReturnsOnCall(i int, result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, result2 error) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.Lock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.Unlock()
	fake.DeleteServiceQuotaIncreaseRequestFromTemplateStub = nil
	if fake.deleteServiceQuotaIncreaseRequestFromTemplateReturnsOnCall == nil {
		fake.deleteServiceQuotaIncreaseRequestFromTemplateReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
			result2 error
		})
	}
	fake.deleteServiceQuotaIncreaseRequestFromTemplateReturnsOnCall[i] = struct {
		result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateRequest(arg1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput) (*request.Request, *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.Lock()
	ret, specificReturn := fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall[len(fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall)]
	fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall = append(fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall, struct {
		arg1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput
	}{arg1})
	stub := fake.DeleteServiceQuotaIncreaseRequestFromTemplateRequestStub
	fakeReturns := fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestReturns
	fake.recordInvocation("DeleteServiceQuotaIncreaseRequestFromTemplateRequest", []interface{}{arg1})
	fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateRequestCallCount() int {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.RLock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.RUnlock()
	return len(fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateRequestCalls(stub func(*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput) (*request.Request, *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput)) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.Lock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.Unlock()
	fake.DeleteServiceQuotaIncreaseRequestFromTemplateRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall(i int) *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.RLock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.RUnlock()
	argsForCall := fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateRequestReturns(result1 *request.Request, result2 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.Lock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.Unlock()
	fake.DeleteServiceQuotaIncreaseRequestFromTemplateRequestStub = nil
	fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.Lock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.Unlock()
	fake.DeleteServiceQuotaIncreaseRequestFromTemplateRequestStub = nil
	if fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall == nil {
		fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
		})
	}
	fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateWithContext(arg1 context.Context, arg2 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput, arg3 ...request.Option) (*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, error) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall[len(fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall)]
	fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall = append(fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteServiceQuotaIncreaseRequestFromTemplateWithContextStub
	fakeReturns := fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextReturns
	fake.recordInvocation("DeleteServiceQuotaIncreaseRequestFromTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateWithContextCallCount() int {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RLock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RUnlock()
	return len(fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateWithContextCalls(stub func(context.Context, *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput, ...request.Option) (*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, error)) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Lock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Unlock()
	fake.DeleteServiceQuotaIncreaseRequestFromTemplateWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall(i int) (context.Context, *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput, []request.Option) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RLock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RUnlock()
	argsForCall := fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateWithContextReturns(result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, result2 error) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Lock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Unlock()
	fake.DeleteServiceQuotaIncreaseRequestFromTemplateWithContextStub = nil
	fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextReturns = struct {
		result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DeleteServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall(i int, result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, result2 error) {
	fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Lock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Unlock()
	fake.DeleteServiceQuotaIncreaseRequestFromTemplateWithContextStub = nil
	if fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall == nil {
		fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
			result2 error
		})
	}
	fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplate(arg1 *servicequotas.DisassociateServiceQuotaTemplateInput) (*servicequotas.DisassociateServiceQuotaTemplateOutput, error) {
	fake.disassociateServiceQuotaTemplateMutex.Lock()
	ret, specificReturn := fake.disassociateServiceQuotaTemplateReturnsOnCall[len(fake.disassociateServiceQuotaTemplateArgsForCall)]
	fake.disassociateServiceQuotaTemplateArgsForCall = append(fake.disassociateServiceQuotaTemplateArgsForCall, struct {
		arg1 *servicequotas.DisassociateServiceQuotaTemplateInput
	}{arg1})
	stub := fake.DisassociateServiceQuotaTemplateStub
	fakeReturns := fake.disassociateServiceQuotaTemplateReturns
	fake.recordInvocation("DisassociateServiceQuotaTemplate", []interface{}{arg1})
	fake.disassociateServiceQuotaTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateCallCount() int {
	fake.disassociateServiceQuotaTemplateMutex.RLock()
	defer fake.disassociateServiceQuotaTemplateMutex.RUnlock()
	return len(fake.disassociateServiceQuotaTemplateArgsForCall)
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateCalls(stub func(*servicequotas.DisassociateServiceQuotaTemplateInput) (*servicequotas.DisassociateServiceQuotaTemplateOutput, error)) {
	fake.disassociateServiceQuotaTemplateMutex.Lock()
	defer fake.disassociateServiceQuotaTemplateMutex.Unlock()
	fake.DisassociateServiceQuotaTemplateStub = stub
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateArgsForCall(i int) *servicequotas.DisassociateServiceQuotaTemplateInput {
	fake.disassociateServiceQuotaTemplateMutex.RLock()
	defer fake.disassociateServiceQuotaTemplateMutex.RUnlock()
	argsForCall := fake.disassociateServiceQuotaTemplateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateReturns(result1 *servicequotas.DisassociateServiceQuotaTemplateOutput, result2 error) {
	fake.disassociateServiceQuotaTemplateMutex.Lock()
	defer fake.disassociateServiceQuotaTemplateMutex.Unlock()
	fake.DisassociateServiceQuotaTemplateStub = nil
	fake.disassociateServiceQuotaTemplateReturns = struct {
		result1 *servicequotas.DisassociateServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateReturnsOnCall(i int, result1 *servicequotas.DisassociateServiceQuotaTemplateOutput, result2 error) {
	fake.disassociateServiceQuotaTemplateMutex.Lock()
	defer fake.disassociateServiceQuotaTemplateMutex.Unlock()
	fake.DisassociateServiceQuotaTemplateStub = nil
	if fake.disassociateServiceQuotaTemplateReturnsOnCall == nil {
		fake.disassociateServiceQuotaTemplateReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.DisassociateServiceQuotaTemplateOutput
			result2 error
		})
	}
	fake.disassociateServiceQuotaTemplateReturnsOnCall[i] = struct {
		result1 *servicequotas.DisassociateServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateRequest(arg1 *servicequotas.DisassociateServiceQuotaTemplateInput) (*request.Request, *servicequotas.DisassociateServiceQuotaTemplateOutput) {
	fake.disassociateServiceQuotaTemplateRequestMutex.Lock()
	ret, specificReturn := fake.disassociateServiceQuotaTemplateRequestReturnsOnCall[len(fake.disassociateServiceQuotaTemplateRequestArgsForCall)]
	fake.disassociateServiceQuotaTemplateRequestArgsForCall = append(fake.disassociateServiceQuotaTemplateRequestArgsForCall, struct {
		arg1 *servicequotas.DisassociateServiceQuotaTemplateInput
	}{arg1})
	stub := fake.DisassociateServiceQuotaTemplateRequestStub
	fakeReturns := fake.disassociateServiceQuotaTemplateRequestReturns
	fake.recordInvocation("DisassociateServiceQuotaTemplateRequest", []interface{}{arg1})
	fake.disassociateServiceQuotaTemplateRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateRequestCallCount() int {
	fake.disassociateServiceQuotaTemplateRequestMutex.RLock()
	defer fake.disassociateServiceQuotaTemplateRequestMutex.RUnlock()
	return len(fake.disassociateServiceQuotaTemplateRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateRequestCalls(stub func(*servicequotas.DisassociateServiceQuotaTemplateInput) (*request.Request, *servicequotas.DisassociateServiceQuotaTemplateOutput)) {
	fake.disassociateServiceQuotaTemplateRequestMutex.Lock()
	defer fake.disassociateServiceQuotaTemplateRequestMutex.Unlock()
	fake.DisassociateServiceQuotaTemplateRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateRequestArgsForCall(i int) *servicequotas.DisassociateServiceQuotaTemplateInput {
	fake.disassociateServiceQuotaTemplateRequestMutex.RLock()
	defer fake.disassociateServiceQuotaTemplateRequestMutex.RUnlock()
	argsForCall := fake.disassociateServiceQuotaTemplateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateRequestReturns(result1 *request.Request, result2 *servicequotas.DisassociateServiceQuotaTemplateOutput) {
	fake.disassociateServiceQuotaTemplateRequestMutex.Lock()
	defer fake.disassociateServiceQuotaTemplateRequestMutex.Unlock()
	fake.DisassociateServiceQuotaTemplateRequestStub = nil
	fake.disassociateServiceQuotaTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.DisassociateServiceQuotaTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.DisassociateServiceQuotaTemplateOutput) {
	fake.disassociateServiceQuotaTemplateRequestMutex.Lock()
	defer fake.disassociateServiceQuotaTemplateRequestMutex.Unlock()
	fake.DisassociateServiceQuotaTemplateRequestStub = nil
	if fake.disassociateServiceQuotaTemplateRequestReturnsOnCall == nil {
		fake.disassociateServiceQuotaTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.DisassociateServiceQuotaTemplateOutput
		})
	}
	fake.disassociateServiceQuotaTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.DisassociateServiceQuotaTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateWithContext(arg1 context.Context, arg2 *servicequotas.DisassociateServiceQuotaTemplateInput, arg3 ...request.Option) (*servicequotas.DisassociateServiceQuotaTemplateOutput, error) {
	fake.disassociateServiceQuotaTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateServiceQuotaTemplateWithContextReturnsOnCall[len(fake.disassociateServiceQuotaTemplateWithContextArgsForCall)]
	fake.disassociateServiceQuotaTemplateWithContextArgsForCall = append(fake.disassociateServiceQuotaTemplateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.DisassociateServiceQuotaTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DisassociateServiceQuotaTemplateWithContextStub
	fakeReturns := fake.disassociateServiceQuotaTemplateWithContextReturns
	fake.recordInvocation("DisassociateServiceQuotaTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateServiceQuotaTemplateWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateWithContextCallCount() int {
	fake.disassociateServiceQuotaTemplateWithContextMutex.RLock()
	defer fake.disassociateServiceQuotaTemplateWithContextMutex.RUnlock()
	return len(fake.disassociateServiceQuotaTemplateWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateWithContextCalls(stub func(context.Context, *servicequotas.DisassociateServiceQuotaTemplateInput, ...request.Option) (*servicequotas.DisassociateServiceQuotaTemplateOutput, error)) {
	fake.disassociateServiceQuotaTemplateWithContextMutex.Lock()
	defer fake.disassociateServiceQuotaTemplateWithContextMutex.Unlock()
	fake.DisassociateServiceQuotaTemplateWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateWithContextArgsForCall(i int) (context.Context, *servicequotas.DisassociateServiceQuotaTemplateInput, []request.Option) {
	fake.disassociateServiceQuotaTemplateWithContextMutex.RLock()
	defer fake.disassociateServiceQuotaTemplateWithContextMutex.RUnlock()
	argsForCall := fake.disassociateServiceQuotaTemplateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateWithContextReturns(result1 *servicequotas.DisassociateServiceQuotaTemplateOutput, result2 error) {
	fake.disassociateServiceQuotaTemplateWithContextMutex.Lock()
	defer fake.disassociateServiceQuotaTemplateWithContextMutex.Unlock()
	fake.DisassociateServiceQuotaTemplateWithContextStub = nil
	fake.disassociateServiceQuotaTemplateWithContextReturns = struct {
		result1 *servicequotas.DisassociateServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) DisassociateServiceQuotaTemplateWithContextReturnsOnCall(i int, result1 *servicequotas.DisassociateServiceQuotaTemplateOutput, result2 error) {
	fake.disassociateServiceQuotaTemplateWithContextMutex.Lock()
	defer fake.disassociateServiceQuotaTemplateWithContextMutex.Unlock()
	fake.DisassociateServiceQuotaTemplateWithContextStub = nil
	if fake.disassociateServiceQuotaTemplateWithContextReturnsOnCall == nil {
		fake.disassociateServiceQuotaTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.DisassociateServiceQuotaTemplateOutput
			result2 error
		})
	}
	fake.disassociateServiceQuotaTemplateWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.DisassociateServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuota(arg1 *servicequotas.GetAWSDefaultServiceQuotaInput) (*servicequotas.GetAWSDefaultServiceQuotaOutput, error) {
	fake.getAWSDefaultServiceQuotaMutex.Lock()
	ret, specificReturn := fake.getAWSDefaultServiceQuotaReturnsOnCall[len(fake.getAWSDefaultServiceQuotaArgsForCall)]
	fake.getAWSDefaultServiceQuotaArgsForCall = append(fake.getAWSDefaultServiceQuotaArgsForCall, struct {
		arg1 *servicequotas.GetAWSDefaultServiceQuotaInput
	}{arg1})
	stub := fake.GetAWSDefaultServiceQuotaStub
	fakeReturns := fake.getAWSDefaultServiceQuotaReturns
	fake.recordInvocation("GetAWSDefaultServiceQuota", []interface{}{arg1})
	fake.getAWSDefaultServiceQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaCallCount() int {
	fake.getAWSDefaultServiceQuotaMutex.RLock()
	defer fake.getAWSDefaultServiceQuotaMutex.RUnlock()
	return len(fake.getAWSDefaultServiceQuotaArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaCalls(stub func(*servicequotas.GetAWSDefaultServiceQuotaInput) (*servicequotas.GetAWSDefaultServiceQuotaOutput, error)) {
	fake.getAWSDefaultServiceQuotaMutex.Lock()
	defer fake.getAWSDefaultServiceQuotaMutex.Unlock()
	fake.GetAWSDefaultServiceQuotaStub = stub
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaArgsForCall(i int) *servicequotas.GetAWSDefaultServiceQuotaInput {
	fake.getAWSDefaultServiceQuotaMutex.RLock()
	defer fake.getAWSDefaultServiceQuotaMutex.RUnlock()
	argsForCall := fake.getAWSDefaultServiceQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaReturns(result1 *servicequotas.GetAWSDefaultServiceQuotaOutput, result2 error) {
	fake.getAWSDefaultServiceQuotaMutex.Lock()
	defer fake.getAWSDefaultServiceQuotaMutex.Unlock()
	fake.GetAWSDefaultServiceQuotaStub = nil
	fake.getAWSDefaultServiceQuotaReturns = struct {
		result1 *servicequotas.GetAWSDefaultServiceQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaReturnsOnCall(i int, result1 *servicequotas.GetAWSDefaultServiceQuotaOutput, result2 error) {
	fake.getAWSDefaultServiceQuotaMutex.Lock()
	defer fake.getAWSDefaultServiceQuotaMutex.Unlock()
	fake.GetAWSDefaultServiceQuotaStub = nil
	if fake.getAWSDefaultServiceQuotaReturnsOnCall == nil {
		fake.getAWSDefaultServiceQuotaReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.GetAWSDefaultServiceQuotaOutput
			result2 error
		})
	}
	fake.getAWSDefaultServiceQuotaReturnsOnCall[i] = struct {
		result1 *servicequotas.GetAWSDefaultServiceQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaRequest(arg1 *servicequotas.GetAWSDefaultServiceQuotaInput) (*request.Request, *servicequotas.GetAWSDefaultServiceQuotaOutput) {
	fake.getAWSDefaultServiceQuotaRequestMutex.Lock()
	ret, specificReturn := fake.getAWSDefaultServiceQuotaRequestReturnsOnCall[len(fake.getAWSDefaultServiceQuotaRequestArgsForCall)]
	fake.getAWSDefaultServiceQuotaRequestArgsForCall = append(fake.getAWSDefaultServiceQuotaRequestArgsForCall, struct {
		arg1 *servicequotas.GetAWSDefaultServiceQuotaInput
	}{arg1})
	stub := fake.GetAWSDefaultServiceQuotaRequestStub
	fakeReturns := fake.getAWSDefaultServiceQuotaRequestReturns
	fake.recordInvocation("GetAWSDefaultServiceQuotaRequest", []interface{}{arg1})
	fake.getAWSDefaultServiceQuotaRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaRequestCallCount() int {
	fake.getAWSDefaultServiceQuotaRequestMutex.RLock()
	defer fake.getAWSDefaultServiceQuotaRequestMutex.RUnlock()
	return len(fake.getAWSDefaultServiceQuotaRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaRequestCalls(stub func(*servicequotas.GetAWSDefaultServiceQuotaInput) (*request.Request, *servicequotas.GetAWSDefaultServiceQuotaOutput)) {
	fake.getAWSDefaultServiceQuotaRequestMutex.Lock()
	defer fake.getAWSDefaultServiceQuotaRequestMutex.Unlock()
	fake.GetAWSDefaultServiceQuotaRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaRequestArgsForCall(i int) *servicequotas.GetAWSDefaultServiceQuotaInput {
	fake.getAWSDefaultServiceQuotaRequestMutex.RLock()
	defer fake.getAWSDefaultServiceQuotaRequestMutex.RUnlock()
	argsForCall := fake.getAWSDefaultServiceQuotaRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaRequestReturns(result1 *request.Request, result2 *servicequotas.GetAWSDefaultServiceQuotaOutput) {
	fake.getAWSDefaultServiceQuotaRequestMutex.Lock()
	defer fake.getAWSDefaultServiceQuotaRequestMutex.Unlock()
	fake.GetAWSDefaultServiceQuotaRequestStub = nil
	fake.getAWSDefaultServiceQuotaRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.GetAWSDefaultServiceQuotaOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.GetAWSDefaultServiceQuotaOutput) {
	fake.getAWSDefaultServiceQuotaRequestMutex.Lock()
	defer fake.getAWSDefaultServiceQuotaRequestMutex.Unlock()
	fake.GetAWSDefaultServiceQuotaRequestStub = nil
	if fake.getAWSDefaultServiceQuotaRequestReturnsOnCall == nil {
		fake.getAWSDefaultServiceQuotaRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.GetAWSDefaultServiceQuotaOutput
		})
	}
	fake.getAWSDefaultServiceQuotaRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.GetAWSDefaultServiceQuotaOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaWithContext(arg1 context.Context, arg2 *servicequotas.GetAWSDefaultServiceQuotaInput, arg3 ...request.Option) (*servicequotas.GetAWSDefaultServiceQuotaOutput, error) {
	fake.getAWSDefaultServiceQuotaWithContextMutex.Lock()
	ret, specificReturn := fake.getAWSDefaultServiceQuotaWithContextReturnsOnCall[len(fake.getAWSDefaultServiceQuotaWithContextArgsForCall)]
	fake.getAWSDefaultServiceQuotaWithContextArgsForCall = append(fake.getAWSDefaultServiceQuotaWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.GetAWSDefaultServiceQuotaInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetAWSDefaultServiceQuotaWithContextStub
	fakeReturns := fake.getAWSDefaultServiceQuotaWithContextReturns
	fake.recordInvocation("GetAWSDefaultServiceQuotaWithContext", []interface{}{arg1, arg2, arg3})
	fake.getAWSDefaultServiceQuotaWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaWithContextCallCount() int {
	fake.getAWSDefaultServiceQuotaWithContextMutex.RLock()
	defer fake.getAWSDefaultServiceQuotaWithContextMutex.RUnlock()
	return len(fake.getAWSDefaultServiceQuotaWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaWithContextCalls(stub func(context.Context, *servicequotas.GetAWSDefaultServiceQuotaInput, ...request.Option) (*servicequotas.GetAWSDefaultServiceQuotaOutput, error)) {
	fake.getAWSDefaultServiceQuotaWithContextMutex.Lock()
	defer fake.getAWSDefaultServiceQuotaWithContextMutex.Unlock()
	fake.GetAWSDefaultServiceQuotaWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaWithContextArgsForCall(i int) (context.Context, *servicequotas.GetAWSDefaultServiceQuotaInput, []request.Option) {
	fake.getAWSDefaultServiceQuotaWithContextMutex.RLock()
	defer fake.getAWSDefaultServiceQuotaWithContextMutex.RUnlock()
	argsForCall := fake.getAWSDefaultServiceQuotaWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaWithContextReturns(result1 *servicequotas.GetAWSDefaultServiceQuotaOutput, result2 error) {
	fake.getAWSDefaultServiceQuotaWithContextMutex.Lock()
	defer fake.getAWSDefaultServiceQuotaWithContextMutex.Unlock()
	fake.GetAWSDefaultServiceQuotaWithContextStub = nil
	fake.getAWSDefaultServiceQuotaWithContextReturns = struct {
		result1 *servicequotas.GetAWSDefaultServiceQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAWSDefaultServiceQuotaWithContextReturnsOnCall(i int, result1 *servicequotas.GetAWSDefaultServiceQuotaOutput, result2 error) {
	fake.getAWSDefaultServiceQuotaWithContextMutex.Lock()
	defer fake.getAWSDefaultServiceQuotaWithContextMutex.Unlock()
	fake.GetAWSDefaultServiceQuotaWithContextStub = nil
	if fake.getAWSDefaultServiceQuotaWithContextReturnsOnCall == nil {
		fake.getAWSDefaultServiceQuotaWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.GetAWSDefaultServiceQuotaOutput
			result2 error
		})
	}
	fake.getAWSDefaultServiceQuotaWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.GetAWSDefaultServiceQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplate(arg1 *servicequotas.GetAssociationForServiceQuotaTemplateInput) (*servicequotas.GetAssociationForServiceQuotaTemplateOutput, error) {
	fake.getAssociationForServiceQuotaTemplateMutex.Lock()
	ret, specificReturn := fake.getAssociationForServiceQuotaTemplateReturnsOnCall[len(fake.getAssociationForServiceQuotaTemplateArgsForCall)]
	fake.getAssociationForServiceQuotaTemplateArgsForCall = append(fake.getAssociationForServiceQuotaTemplateArgsForCall, struct {
		arg1 *servicequotas.GetAssociationForServiceQuotaTemplateInput
	}{arg1})
	stub := fake.GetAssociationForServiceQuotaTemplateStub
	fakeReturns := fake.getAssociationForServiceQuotaTemplateReturns
	fake.recordInvocation("GetAssociationForServiceQuotaTemplate", []interface{}{arg1})
	fake.getAssociationForServiceQuotaTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateCallCount() int {
	fake.getAssociationForServiceQuotaTemplateMutex.RLock()
	defer fake.getAssociationForServiceQuotaTemplateMutex.RUnlock()
	return len(fake.getAssociationForServiceQuotaTemplateArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateCalls(stub func(*servicequotas.GetAssociationForServiceQuotaTemplateInput) (*servicequotas.GetAssociationForServiceQuotaTemplateOutput, error)) {
	fake.getAssociationForServiceQuotaTemplateMutex.Lock()
	defer fake.getAssociationForServiceQuotaTemplateMutex.Unlock()
	fake.GetAssociationForServiceQuotaTemplateStub = stub
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateArgsForCall(i int) *servicequotas.GetAssociationForServiceQuotaTemplateInput {
	fake.getAssociationForServiceQuotaTemplateMutex.RLock()
	defer fake.getAssociationForServiceQuotaTemplateMutex.RUnlock()
	argsForCall := fake.getAssociationForServiceQuotaTemplateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateReturns(result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput, result2 error) {
	fake.getAssociationForServiceQuotaTemplateMutex.Lock()
	defer fake.getAssociationForServiceQuotaTemplateMutex.Unlock()
	fake.GetAssociationForServiceQuotaTemplateStub = nil
	fake.getAssociationForServiceQuotaTemplateReturns = struct {
		result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateReturnsOnCall(i int, result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput, result2 error) {
	fake.getAssociationForServiceQuotaTemplateMutex.Lock()
	defer fake.getAssociationForServiceQuotaTemplateMutex.Unlock()
	fake.GetAssociationForServiceQuotaTemplateStub = nil
	if fake.getAssociationForServiceQuotaTemplateReturnsOnCall == nil {
		fake.getAssociationForServiceQuotaTemplateReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
			result2 error
		})
	}
	fake.getAssociationForServiceQuotaTemplateReturnsOnCall[i] = struct {
		result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateRequest(arg1 *servicequotas.GetAssociationForServiceQuotaTemplateInput) (*request.Request, *servicequotas.GetAssociationForServiceQuotaTemplateOutput) {
	fake.getAssociationForServiceQuotaTemplateRequestMutex.Lock()
	ret, specificReturn := fake.getAssociationForServiceQuotaTemplateRequestReturnsOnCall[len(fake.getAssociationForServiceQuotaTemplateRequestArgsForCall)]
	fake.getAssociationForServiceQuotaTemplateRequestArgsForCall = append(fake.getAssociationForServiceQuotaTemplateRequestArgsForCall, struct {
		arg1 *servicequotas.GetAssociationForServiceQuotaTemplateInput
	}{arg1})
	stub := fake.GetAssociationForServiceQuotaTemplateRequestStub
	fakeReturns := fake.getAssociationForServiceQuotaTemplateRequestReturns
	fake.recordInvocation("GetAssociationForServiceQuotaTemplateRequest", []interface{}{arg1})
	fake.getAssociationForServiceQuotaTemplateRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateRequestCallCount() int {
	fake.getAssociationForServiceQuotaTemplateRequestMutex.RLock()
	defer fake.getAssociationForServiceQuotaTemplateRequestMutex.RUnlock()
	return len(fake.getAssociationForServiceQuotaTemplateRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateRequestCalls(stub func(*servicequotas.GetAssociationForServiceQuotaTemplateInput) (*request.Request, *servicequotas.GetAssociationForServiceQuotaTemplateOutput)) {
	fake.getAssociationForServiceQuotaTemplateRequestMutex.Lock()
	defer fake.getAssociationForServiceQuotaTemplateRequestMutex.Unlock()
	fake.GetAssociationForServiceQuotaTemplateRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateRequestArgsForCall(i int) *servicequotas.GetAssociationForServiceQuotaTemplateInput {
	fake.getAssociationForServiceQuotaTemplateRequestMutex.RLock()
	defer fake.getAssociationForServiceQuotaTemplateRequestMutex.RUnlock()
	argsForCall := fake.getAssociationForServiceQuotaTemplateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateRequestReturns(result1 *request.Request, result2 *servicequotas.GetAssociationForServiceQuotaTemplateOutput) {
	fake.getAssociationForServiceQuotaTemplateRequestMutex.Lock()
	defer fake.getAssociationForServiceQuotaTemplateRequestMutex.Unlock()
	fake.GetAssociationForServiceQuotaTemplateRequestStub = nil
	fake.getAssociationForServiceQuotaTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.GetAssociationForServiceQuotaTemplateOutput) {
	fake.getAssociationForServiceQuotaTemplateRequestMutex.Lock()
	defer fake.getAssociationForServiceQuotaTemplateRequestMutex.Unlock()
	fake.GetAssociationForServiceQuotaTemplateRequestStub = nil
	if fake.getAssociationForServiceQuotaTemplateRequestReturnsOnCall == nil {
		fake.getAssociationForServiceQuotaTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
		})
	}
	fake.getAssociationForServiceQuotaTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateWithContext(arg1 context.Context, arg2 *servicequotas.GetAssociationForServiceQuotaTemplateInput, arg3 ...request.Option) (*servicequotas.GetAssociationForServiceQuotaTemplateOutput, error) {
	fake.getAssociationForServiceQuotaTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.getAssociationForServiceQuotaTemplateWithContextReturnsOnCall[len(fake.getAssociationForServiceQuotaTemplateWithContextArgsForCall)]
	fake.getAssociationForServiceQuotaTemplateWithContextArgsForCall = append(fake.getAssociationForServiceQuotaTemplateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.GetAssociationForServiceQuotaTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetAssociationForServiceQuotaTemplateWithContextStub
	fakeReturns := fake.getAssociationForServiceQuotaTemplateWithContextReturns
	fake.recordInvocation("GetAssociationForServiceQuotaTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.getAssociationForServiceQuotaTemplateWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateWithContextCallCount() int {
	fake.getAssociationForServiceQuotaTemplateWithContextMutex.RLock()
	defer fake.getAssociationForServiceQuotaTemplateWithContextMutex.RUnlock()
	return len(fake.getAssociationForServiceQuotaTemplateWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateWithContextCalls(stub func(context.Context, *servicequotas.GetAssociationForServiceQuotaTemplateInput, ...request.Option) (*servicequotas.GetAssociationForServiceQuotaTemplateOutput, error)) {
	fake.getAssociationForServiceQuotaTemplateWithContextMutex.Lock()
	defer fake.getAssociationForServiceQuotaTemplateWithContextMutex.Unlock()
	fake.GetAssociationForServiceQuotaTemplateWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateWithContextArgsForCall(i int) (context.Context, *servicequotas.GetAssociationForServiceQuotaTemplateInput, []request.Option) {
	fake.getAssociationForServiceQuotaTemplateWithContextMutex.RLock()
	defer fake.getAssociationForServiceQuotaTemplateWithContextMutex.RUnlock()
	argsForCall := fake.getAssociationForServiceQuotaTemplateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateWithContextReturns(result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput, result2 error) {
	fake.getAssociationForServiceQuotaTemplateWithContextMutex.Lock()
	defer fake.getAssociationForServiceQuotaTemplateWithContextMutex.Unlock()
	fake.GetAssociationForServiceQuotaTemplateWithContextStub = nil
	fake.getAssociationForServiceQuotaTemplateWithContextReturns = struct {
		result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetAssociationForServiceQuotaTemplateWithContextReturnsOnCall(i int, result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput, result2 error) {
	fake.getAssociationForServiceQuotaTemplateWithContextMutex.Lock()
	defer fake.getAssociationForServiceQuotaTemplateWithContextMutex.Unlock()
	fake.GetAssociationForServiceQuotaTemplateWithContextStub = nil
	if fake.getAssociationForServiceQuotaTemplateWithContextReturnsOnCall == nil {
		fake.getAssociationForServiceQuotaTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
			result2 error
		})
	}
	fake.getAssociationForServiceQuotaTemplateWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChange(arg1 *servicequotas.GetRequestedServiceQuotaChangeInput) (*servicequotas.GetRequestedServiceQuotaChangeOutput, error) {
	fake.getRequestedServiceQuotaChangeMutex.Lock()
	ret, specificReturn := fake.getRequestedServiceQuotaChangeReturnsOnCall[len(fake.getRequestedServiceQuotaChangeArgsForCall)]
	fake.getRequestedServiceQuotaChangeArgsForCall = append(fake.getRequestedServiceQuotaChangeArgsForCall, struct {
		arg1 *servicequotas.GetRequestedServiceQuotaChangeInput
	}{arg1})
	stub := fake.GetRequestedServiceQuotaChangeStub
	fakeReturns := fake.getRequestedServiceQuotaChangeReturns
	fake.recordInvocation("GetRequestedServiceQuotaChange", []interface{}{arg1})
	fake.getRequestedServiceQuotaChangeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeCallCount() int {
	fake.getRequestedServiceQuotaChangeMutex.RLock()
	defer fake.getRequestedServiceQuotaChangeMutex.RUnlock()
	return len(fake.getRequestedServiceQuotaChangeArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeCalls(stub func(*servicequotas.GetRequestedServiceQuotaChangeInput) (*servicequotas.GetRequestedServiceQuotaChangeOutput, error)) {
	fake.getRequestedServiceQuotaChangeMutex.Lock()
	defer fake.getRequestedServiceQuotaChangeMutex.Unlock()
	fake.GetRequestedServiceQuotaChangeStub = stub
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeArgsForCall(i int) *servicequotas.GetRequestedServiceQuotaChangeInput {
	fake.getRequestedServiceQuotaChangeMutex.RLock()
	defer fake.getRequestedServiceQuotaChangeMutex.RUnlock()
	argsForCall := fake.getRequestedServiceQuotaChangeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeReturns(result1 *servicequotas.GetRequestedServiceQuotaChangeOutput, result2 error) {
	fake.getRequestedServiceQuotaChangeMutex.Lock()
	defer fake.getRequestedServiceQuotaChangeMutex.Unlock()
	fake.GetRequestedServiceQuotaChangeStub = nil
	fake.getRequestedServiceQuotaChangeReturns = struct {
		result1 *servicequotas.GetRequestedServiceQuotaChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeReturnsOnCall(i int, result1 *servicequotas.GetRequestedServiceQuotaChangeOutput, result2 error) {
	fake.getRequestedServiceQuotaChangeMutex.Lock()
	defer fake.getRequestedServiceQuotaChangeMutex.Unlock()
	fake.GetRequestedServiceQuotaChangeStub = nil
	if fake.getRequestedServiceQuotaChangeReturnsOnCall == nil {
		fake.getRequestedServiceQuotaChangeReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.GetRequestedServiceQuotaChangeOutput
			result2 error
		})
	}
	fake.getRequestedServiceQuotaChangeReturnsOnCall[i] = struct {
		result1 *servicequotas.GetRequestedServiceQuotaChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeRequest(arg1 *servicequotas.GetRequestedServiceQuotaChangeInput) (*request.Request, *servicequotas.GetRequestedServiceQuotaChangeOutput) {
	fake.getRequestedServiceQuotaChangeRequestMutex.Lock()
	ret, specificReturn := fake.getRequestedServiceQuotaChangeRequestReturnsOnCall[len(fake.getRequestedServiceQuotaChangeRequestArgsForCall)]
	fake.getRequestedServiceQuotaChangeRequestArgsForCall = append(fake.getRequestedServiceQuotaChangeRequestArgsForCall, struct {
		arg1 *servicequotas.GetRequestedServiceQuotaChangeInput
	}{arg1})
	stub := fake.GetRequestedServiceQuotaChangeRequestStub
	fakeReturns := fake.getRequestedServiceQuotaChangeRequestReturns
	fake.recordInvocation("GetRequestedServiceQuotaChangeRequest", []interface{}{arg1})
	fake.getRequestedServiceQuotaChangeRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeRequestCallCount() int {
	fake.getRequestedServiceQuotaChangeRequestMutex.RLock()
	defer fake.getRequestedServiceQuotaChangeRequestMutex.RUnlock()
	return len(fake.getRequestedServiceQuotaChangeRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeRequestCalls(stub func(*servicequotas.GetRequestedServiceQuotaChangeInput) (*request.Request, *servicequotas.GetRequestedServiceQuotaChangeOutput)) {
	fake.getRequestedServiceQuotaChangeRequestMutex.Lock()
	defer fake.getRequestedServiceQuotaChangeRequestMutex.Unlock()
	fake.GetRequestedServiceQuotaChangeRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeRequestArgsForCall(i int) *servicequotas.GetRequestedServiceQuotaChangeInput {
	fake.getRequestedServiceQuotaChangeRequestMutex.RLock()
	defer fake.getRequestedServiceQuotaChangeRequestMutex.RUnlock()
	argsForCall := fake.getRequestedServiceQuotaChangeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeRequestReturns(result1 *request.Request, result2 *servicequotas.GetRequestedServiceQuotaChangeOutput) {
	fake.getRequestedServiceQuotaChangeRequestMutex.Lock()
	defer fake.getRequestedServiceQuotaChangeRequestMutex.Unlock()
	fake.GetRequestedServiceQuotaChangeRequestStub = nil
	fake.getRequestedServiceQuotaChangeRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.GetRequestedServiceQuotaChangeOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.GetRequestedServiceQuotaChangeOutput) {
	fake.getRequestedServiceQuotaChangeRequestMutex.Lock()
	defer fake.getRequestedServiceQuotaChangeRequestMutex.Unlock()
	fake.GetRequestedServiceQuotaChangeRequestStub = nil
	if fake.getRequestedServiceQuotaChangeRequestReturnsOnCall == nil {
		fake.getRequestedServiceQuotaChangeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.GetRequestedServiceQuotaChangeOutput
		})
	}
	fake.getRequestedServiceQuotaChangeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.GetRequestedServiceQuotaChangeOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeWithContext(arg1 context.Context, arg2 *servicequotas.GetRequestedServiceQuotaChangeInput, arg3 ...request.Option) (*servicequotas.GetRequestedServiceQuotaChangeOutput, error) {
	fake.getRequestedServiceQuotaChangeWithContextMutex.Lock()
	ret, specificReturn := fake.getRequestedServiceQuotaChangeWithContextReturnsOnCall[len(fake.getRequestedServiceQuotaChangeWithContextArgsForCall)]
	fake.getRequestedServiceQuotaChangeWithContextArgsForCall = append(fake.getRequestedServiceQuotaChangeWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.GetRequestedServiceQuotaChangeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetRequestedServiceQuotaChangeWithContextStub
	fakeReturns := fake.getRequestedServiceQuotaChangeWithContextReturns
	fake.recordInvocation("GetRequestedServiceQuotaChangeWithContext", []interface{}{arg1, arg2, arg3})
	fake.getRequestedServiceQuotaChangeWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeWithContextCallCount() int {
	fake.getRequestedServiceQuotaChangeWithContextMutex.RLock()
	defer fake.getRequestedServiceQuotaChangeWithContextMutex.RUnlock()
	return len(fake.getRequestedServiceQuotaChangeWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeWithContextCalls(stub func(context.Context, *servicequotas.GetRequestedServiceQuotaChangeInput, ...request.Option) (*servicequotas.GetRequestedServiceQuotaChangeOutput, error)) {
	fake.getRequestedServiceQuotaChangeWithContextMutex.Lock()
	defer fake.getRequestedServiceQuotaChangeWithContextMutex.Unlock()
	fake.GetRequestedServiceQuotaChangeWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeWithContextArgsForCall(i int) (context.Context, *servicequotas.GetRequestedServiceQuotaChangeInput, []request.Option) {
	fake.getRequestedServiceQuotaChangeWithContextMutex.RLock()
	defer fake.getRequestedServiceQuotaChangeWithContextMutex.RUnlock()
	argsForCall := fake.getRequestedServiceQuotaChangeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeWithContextReturns(result1 *servicequotas.GetRequestedServiceQuotaChangeOutput, result2 error) {
	fake.getRequestedServiceQuotaChangeWithContextMutex.Lock()
	defer fake.getRequestedServiceQuotaChangeWithContextMutex.Unlock()
	fake.GetRequestedServiceQuotaChangeWithContextStub = nil
	fake.getRequestedServiceQuotaChangeWithContextReturns = struct {
		result1 *servicequotas.GetRequestedServiceQuotaChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetRequestedServiceQuotaChangeWithContextReturnsOnCall(i int, result1 *servicequotas.GetRequestedServiceQuotaChangeOutput, result2 error) {
	fake.getRequestedServiceQuotaChangeWithContextMutex.Lock()
	defer fake.getRequestedServiceQuotaChangeWithContextMutex.Unlock()
	fake.GetRequestedServiceQuotaChangeWithContextStub = nil
	if fake.getRequestedServiceQuotaChangeWithContextReturnsOnCall == nil {
		fake.getRequestedServiceQuotaChangeWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.GetRequestedServiceQuotaChangeOutput
			result2 error
		})
	}
	fake.getRequestedServiceQuotaChangeWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.GetRequestedServiceQuotaChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuota(arg1 *servicequotas.GetServiceQuotaInput) (*servicequotas.GetServiceQuotaOutput, error) {
	fake.getServiceQuotaMutex.Lock()
	ret, specificReturn := fake.getServiceQuotaReturnsOnCall[len(fake.getServiceQuotaArgsForCall)]
	fake.getServiceQuotaArgsForCall = append(fake.getServiceQuotaArgsForCall, struct {
		arg1 *servicequotas.GetServiceQuotaInput
	}{arg1})
	stub := fake.GetServiceQuotaStub
	fakeReturns := fake.getServiceQuotaReturns
	fake.recordInvocation("GetServiceQuota", []interface{}{arg1})
	fake.getServiceQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaCallCount() int {
	fake.getServiceQuotaMutex.RLock()
	defer fake.getServiceQuotaMutex.RUnlock()
	return len(fake.getServiceQuotaArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaCalls(stub func(*servicequotas.GetServiceQuotaInput) (*servicequotas.GetServiceQuotaOutput, error)) {
	fake.getServiceQuotaMutex.Lock()
	defer fake.getServiceQuotaMutex.Unlock()
	fake.GetServiceQuotaStub = stub
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaArgsForCall(i int) *servicequotas.GetServiceQuotaInput {
	fake.getServiceQuotaMutex.RLock()
	defer fake.getServiceQuotaMutex.RUnlock()
	argsForCall := fake.getServiceQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaReturns(result1 *servicequotas.GetServiceQuotaOutput, result2 error) {
	fake.getServiceQuotaMutex.Lock()
	defer fake.getServiceQuotaMutex.Unlock()
	fake.GetServiceQuotaStub = nil
	fake.getServiceQuotaReturns = struct {
		result1 *servicequotas.GetServiceQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaReturnsOnCall(i int, result1 *servicequotas.GetServiceQuotaOutput, result2 error) {
	fake.getServiceQuotaMutex.Lock()
	defer fake.getServiceQuotaMutex.Unlock()
	fake.GetServiceQuotaStub = nil
	if fake.getServiceQuotaReturnsOnCall == nil {
		fake.getServiceQuotaReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.GetServiceQuotaOutput
			result2 error
		})
	}
	fake.getServiceQuotaReturnsOnCall[i] = struct {
		result1 *servicequotas.GetServiceQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplate(arg1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput) (*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, error) {
	fake.getServiceQuotaIncreaseRequestFromTemplateMutex.Lock()
	ret, specificReturn := fake.getServiceQuotaIncreaseRequestFromTemplateReturnsOnCall[len(fake.getServiceQuotaIncreaseRequestFromTemplateArgsForCall)]
	fake.getServiceQuotaIncreaseRequestFromTemplateArgsForCall = append(fake.getServiceQuotaIncreaseRequestFromTemplateArgsForCall, struct {
		arg1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput
	}{arg1})
	stub := fake.GetServiceQuotaIncreaseRequestFromTemplateStub
	fakeReturns := fake.getServiceQuotaIncreaseRequestFromTemplateReturns
	fake.recordInvocation("GetServiceQuotaIncreaseRequestFromTemplate", []interface{}{arg1})
	fake.getServiceQuotaIncreaseRequestFromTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateCallCount() int {
	fake.getServiceQuotaIncreaseRequestFromTemplateMutex.RLock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateMutex.RUnlock()
	return len(fake.getServiceQuotaIncreaseRequestFromTemplateArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateCalls(stub func(*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput) (*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, error)) {
	fake.getServiceQuotaIncreaseRequestFromTemplateMutex.Lock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateMutex.Unlock()
	fake.GetServiceQuotaIncreaseRequestFromTemplateStub = stub
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateArgsForCall(i int) *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput {
	fake.getServiceQuotaIncreaseRequestFromTemplateMutex.RLock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateMutex.RUnlock()
	argsForCall := fake.getServiceQuotaIncreaseRequestFromTemplateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateReturns(result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, result2 error) {
	fake.getServiceQuotaIncreaseRequestFromTemplateMutex.Lock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateMutex.Unlock()
	fake.GetServiceQuotaIncreaseRequestFromTemplateStub = nil
	fake.getServiceQuotaIncreaseRequestFromTemplateReturns = struct {
		result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateReturnsOnCall(i int, result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, result2 error) {
	fake.getServiceQuotaIncreaseRequestFromTemplateMutex.Lock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateMutex.Unlock()
	fake.GetServiceQuotaIncreaseRequestFromTemplateStub = nil
	if fake.getServiceQuotaIncreaseRequestFromTemplateReturnsOnCall == nil {
		fake.getServiceQuotaIncreaseRequestFromTemplateReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
			result2 error
		})
	}
	fake.getServiceQuotaIncreaseRequestFromTemplateReturnsOnCall[i] = struct {
		result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateRequest(arg1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput) (*request.Request, *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput) {
	fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.Lock()
	ret, specificReturn := fake.getServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall[len(fake.getServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall)]
	fake.getServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall = append(fake.getServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall, struct {
		arg1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput
	}{arg1})
	stub := fake.GetServiceQuotaIncreaseRequestFromTemplateRequestStub
	fakeReturns := fake.getServiceQuotaIncreaseRequestFromTemplateRequestReturns
	fake.recordInvocation("GetServiceQuotaIncreaseRequestFromTemplateRequest", []interface{}{arg1})
	fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateRequestCallCount() int {
	fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.RLock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.RUnlock()
	return len(fake.getServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateRequestCalls(stub func(*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput) (*request.Request, *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput)) {
	fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.Lock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.Unlock()
	fake.GetServiceQuotaIncreaseRequestFromTemplateRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall(i int) *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput {
	fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.RLock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.RUnlock()
	argsForCall := fake.getServiceQuotaIncreaseRequestFromTemplateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateRequestReturns(result1 *request.Request, result2 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput) {
	fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.Lock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.Unlock()
	fake.GetServiceQuotaIncreaseRequestFromTemplateRequestStub = nil
	fake.getServiceQuotaIncreaseRequestFromTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput) {
	fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.Lock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.Unlock()
	fake.GetServiceQuotaIncreaseRequestFromTemplateRequestStub = nil
	if fake.getServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall == nil {
		fake.getServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
		})
	}
	fake.getServiceQuotaIncreaseRequestFromTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateWithContext(arg1 context.Context, arg2 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput, arg3 ...request.Option) (*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, error) {
	fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.getServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall[len(fake.getServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall)]
	fake.getServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall = append(fake.getServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetServiceQuotaIncreaseRequestFromTemplateWithContextStub
	fakeReturns := fake.getServiceQuotaIncreaseRequestFromTemplateWithContextReturns
	fake.recordInvocation("GetServiceQuotaIncreaseRequestFromTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateWithContextCallCount() int {
	fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RLock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RUnlock()
	return len(fake.getServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateWithContextCalls(stub func(context.Context, *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput, ...request.Option) (*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, error)) {
	fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Lock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Unlock()
	fake.GetServiceQuotaIncreaseRequestFromTemplateWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall(i int) (context.Context, *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput, []request.Option) {
	fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RLock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RUnlock()
	argsForCall := fake.getServiceQuotaIncreaseRequestFromTemplateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateWithContextReturns(result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, result2 error) {
	fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Lock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Unlock()
	fake.GetServiceQuotaIncreaseRequestFromTemplateWithContextStub = nil
	fake.getServiceQuotaIncreaseRequestFromTemplateWithContextReturns = struct {
		result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall(i int, result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, result2 error) {
	fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Lock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.Unlock()
	fake.GetServiceQuotaIncreaseRequestFromTemplateWithContextStub = nil
	if fake.getServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall == nil {
		fake.getServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
			result2 error
		})
	}
	fake.getServiceQuotaIncreaseRequestFromTemplateWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaRequest(arg1 *servicequotas.GetServiceQuotaInput) (*request.Request, *servicequotas.GetServiceQuotaOutput) {
	fake.getServiceQuotaRequestMutex.Lock()
	ret, specificReturn := fake.getServiceQuotaRequestReturnsOnCall[len(fake.getServiceQuotaRequestArgsForCall)]
	fake.getServiceQuotaRequestArgsForCall = append(fake.getServiceQuotaRequestArgsForCall, struct {
		arg1 *servicequotas.GetServiceQuotaInput
	}{arg1})
	stub := fake.GetServiceQuotaRequestStub
	fakeReturns := fake.getServiceQuotaRequestReturns
	fake.recordInvocation("GetServiceQuotaRequest", []interface{}{arg1})
	fake.getServiceQuotaRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaRequestCallCount() int {
	fake.getServiceQuotaRequestMutex.RLock()
	defer fake.getServiceQuotaRequestMutex.RUnlock()
	return len(fake.getServiceQuotaRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaRequestCalls(stub func(*servicequotas.GetServiceQuotaInput) (*request.Request, *servicequotas.GetServiceQuotaOutput)) {
	fake.getServiceQuotaRequestMutex.Lock()
	defer fake.getServiceQuotaRequestMutex.Unlock()
	fake.GetServiceQuotaRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaRequestArgsForCall(i int) *servicequotas.GetServiceQuotaInput {
	fake.getServiceQuotaRequestMutex.RLock()
	defer fake.getServiceQuotaRequestMutex.RUnlock()
	argsForCall := fake.getServiceQuotaRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaRequestReturns(result1 *request.Request, result2 *servicequotas.GetServiceQuotaOutput) {
	fake.getServiceQuotaRequestMutex.Lock()
	defer fake.getServiceQuotaRequestMutex.Unlock()
	fake.GetServiceQuotaRequestStub = nil
	fake.getServiceQuotaRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.GetServiceQuotaOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.GetServiceQuotaOutput) {
	fake.getServiceQuotaRequestMutex.Lock()
	defer fake.getServiceQuotaRequestMutex.Unlock()
	fake.GetServiceQuotaRequestStub = nil
	if fake.getServiceQuotaRequestReturnsOnCall == nil {
		fake.getServiceQuotaRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.GetServiceQuotaOutput
		})
	}
	fake.getServiceQuotaRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.GetServiceQuotaOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaWithContext(arg1 context.Context, arg2 *servicequotas.GetServiceQuotaInput, arg3 ...request.Option) (*servicequotas.GetServiceQuotaOutput, error) {
	fake.getServiceQuotaWithContextMutex.Lock()
	ret, specificReturn := fake.getServiceQuotaWithContextReturnsOnCall[len(fake.getServiceQuotaWithContextArgsForCall)]
	fake.getServiceQuotaWithContextArgsForCall = append(fake.getServiceQuotaWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.GetServiceQuotaInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetServiceQuotaWithContextStub
	fakeReturns := fake.getServiceQuotaWithContextReturns
	fake.recordInvocation("GetServiceQuotaWithContext", []interface{}{arg1, arg2, arg3})
	fake.getServiceQuotaWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaWithContextCallCount() int {
	fake.getServiceQuotaWithContextMutex.RLock()
	defer fake.getServiceQuotaWithContextMutex.RUnlock()
	return len(fake.getServiceQuotaWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaWithContextCalls(stub func(context.Context, *servicequotas.GetServiceQuotaInput, ...request.Option) (*servicequotas.GetServiceQuotaOutput, error)) {
	fake.getServiceQuotaWithContextMutex.Lock()
	defer fake.getServiceQuotaWithContextMutex.Unlock()
	fake.GetServiceQuotaWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaWithContextArgsForCall(i int) (context.Context, *servicequotas.GetServiceQuotaInput, []request.Option) {
	fake.getServiceQuotaWithContextMutex.RLock()
	defer fake.getServiceQuotaWithContextMutex.RUnlock()
	argsForCall := fake.getServiceQuotaWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaWithContextReturns(result1 *servicequotas.GetServiceQuotaOutput, result2 error) {
	fake.getServiceQuotaWithContextMutex.Lock()
	defer fake.getServiceQuotaWithContextMutex.Unlock()
	fake.GetServiceQuotaWithContextStub = nil
	fake.getServiceQuotaWithContextReturns = struct {
		result1 *servicequotas.GetServiceQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) GetServiceQuotaWithContextReturnsOnCall(i int, result1 *servicequotas.GetServiceQuotaOutput, result2 error) {
	fake.getServiceQuotaWithContextMutex.Lock()
	defer fake.getServiceQuotaWithContextMutex.Unlock()
	fake.GetServiceQuotaWithContextStub = nil
	if fake.getServiceQuotaWithContextReturnsOnCall == nil {
		fake.getServiceQuotaWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.GetServiceQuotaOutput
			result2 error
		})
	}
	fake.getServiceQuotaWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.GetServiceQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotas(arg1 *servicequotas.ListAWSDefaultServiceQuotasInput) (*servicequotas.ListAWSDefaultServiceQuotasOutput, error) {
	fake.listAWSDefaultServiceQuotasMutex.Lock()
	ret, specificReturn := fake.listAWSDefaultServiceQuotasReturnsOnCall[len(fake.listAWSDefaultServiceQuotasArgsForCall)]
	fake.listAWSDefaultServiceQuotasArgsForCall = append(fake.listAWSDefaultServiceQuotasArgsForCall, struct {
		arg1 *servicequotas.ListAWSDefaultServiceQuotasInput
	}{arg1})
	stub := fake.ListAWSDefaultServiceQuotasStub
	fakeReturns := fake.listAWSDefaultServiceQuotasReturns
	fake.recordInvocation("ListAWSDefaultServiceQuotas", []interface{}{arg1})
	fake.listAWSDefaultServiceQuotasMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasCallCount() int {
	fake.listAWSDefaultServiceQuotasMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasMutex.RUnlock()
	return len(fake.listAWSDefaultServiceQuotasArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasCalls(stub func(*servicequotas.ListAWSDefaultServiceQuotasInput) (*servicequotas.ListAWSDefaultServiceQuotasOutput, error)) {
	fake.listAWSDefaultServiceQuotasMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasStub = stub
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasArgsForCall(i int) *servicequotas.ListAWSDefaultServiceQuotasInput {
	fake.listAWSDefaultServiceQuotasMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasMutex.RUnlock()
	argsForCall := fake.listAWSDefaultServiceQuotasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasReturns(result1 *servicequotas.ListAWSDefaultServiceQuotasOutput, result2 error) {
	fake.listAWSDefaultServiceQuotasMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasStub = nil
	fake.listAWSDefaultServiceQuotasReturns = struct {
		result1 *servicequotas.ListAWSDefaultServiceQuotasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasReturnsOnCall(i int, result1 *servicequotas.ListAWSDefaultServiceQuotasOutput, result2 error) {
	fake.listAWSDefaultServiceQuotasMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasStub = nil
	if fake.listAWSDefaultServiceQuotasReturnsOnCall == nil {
		fake.listAWSDefaultServiceQuotasReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListAWSDefaultServiceQuotasOutput
			result2 error
		})
	}
	fake.listAWSDefaultServiceQuotasReturnsOnCall[i] = struct {
		result1 *servicequotas.ListAWSDefaultServiceQuotasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPages(arg1 *servicequotas.ListAWSDefaultServiceQuotasInput, arg2 func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool) error {
	fake.listAWSDefaultServiceQuotasPagesMutex.Lock()
	ret, specificReturn := fake.listAWSDefaultServiceQuotasPagesReturnsOnCall[len(fake.listAWSDefaultServiceQuotasPagesArgsForCall)]
	fake.listAWSDefaultServiceQuotasPagesArgsForCall = append(fake.listAWSDefaultServiceQuotasPagesArgsForCall, struct {
		arg1 *servicequotas.ListAWSDefaultServiceQuotasInput
		arg2 func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListAWSDefaultServiceQuotasPagesStub
	fakeReturns := fake.listAWSDefaultServiceQuotasPagesReturns
	fake.recordInvocation("ListAWSDefaultServiceQuotasPages", []interface{}{arg1, arg2})
	fake.listAWSDefaultServiceQuotasPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPagesCallCount() int {
	fake.listAWSDefaultServiceQuotasPagesMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasPagesMutex.RUnlock()
	return len(fake.listAWSDefaultServiceQuotasPagesArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPagesCalls(stub func(*servicequotas.ListAWSDefaultServiceQuotasInput, func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool) error) {
	fake.listAWSDefaultServiceQuotasPagesMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasPagesMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasPagesStub = stub
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPagesArgsForCall(i int) (*servicequotas.ListAWSDefaultServiceQuotasInput, func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool) {
	fake.listAWSDefaultServiceQuotasPagesMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasPagesMutex.RUnlock()
	argsForCall := fake.listAWSDefaultServiceQuotasPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPagesReturns(result1 error) {
	fake.listAWSDefaultServiceQuotasPagesMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasPagesMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasPagesStub = nil
	fake.listAWSDefaultServiceQuotasPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPagesReturnsOnCall(i int, result1 error) {
	fake.listAWSDefaultServiceQuotasPagesMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasPagesMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasPagesStub = nil
	if fake.listAWSDefaultServiceQuotasPagesReturnsOnCall == nil {
		fake.listAWSDefaultServiceQuotasPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAWSDefaultServiceQuotasPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPagesWithContext(arg1 context.Context, arg2 *servicequotas.ListAWSDefaultServiceQuotasInput, arg3 func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool, arg4 ...request.Option) error {
	fake.listAWSDefaultServiceQuotasPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listAWSDefaultServiceQuotasPagesWithContextReturnsOnCall[len(fake.listAWSDefaultServiceQuotasPagesWithContextArgsForCall)]
	fake.listAWSDefaultServiceQuotasPagesWithContextArgsForCall = append(fake.listAWSDefaultServiceQuotasPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListAWSDefaultServiceQuotasInput
		arg3 func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListAWSDefaultServiceQuotasPagesWithContextStub
	fakeReturns := fake.listAWSDefaultServiceQuotasPagesWithContextReturns
	fake.recordInvocation("ListAWSDefaultServiceQuotasPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAWSDefaultServiceQuotasPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPagesWithContextCallCount() int {
	fake.listAWSDefaultServiceQuotasPagesWithContextMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasPagesWithContextMutex.RUnlock()
	return len(fake.listAWSDefaultServiceQuotasPagesWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPagesWithContextCalls(stub func(context.Context, *servicequotas.ListAWSDefaultServiceQuotasInput, func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool, ...request.Option) error) {
	fake.listAWSDefaultServiceQuotasPagesWithContextMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasPagesWithContextMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasPagesWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPagesWithContextArgsForCall(i int) (context.Context, *servicequotas.ListAWSDefaultServiceQuotasInput, func(*servicequotas.ListAWSDefaultServiceQuotasOutput, bool) bool, []request.Option) {
	fake.listAWSDefaultServiceQuotasPagesWithContextMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasPagesWithContextMutex.RUnlock()
	argsForCall := fake.listAWSDefaultServiceQuotasPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPagesWithContextReturns(result1 error) {
	fake.listAWSDefaultServiceQuotasPagesWithContextMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasPagesWithContextMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasPagesWithContextStub = nil
	fake.listAWSDefaultServiceQuotasPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listAWSDefaultServiceQuotasPagesWithContextMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasPagesWithContextMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasPagesWithContextStub = nil
	if fake.listAWSDefaultServiceQuotasPagesWithContextReturnsOnCall == nil {
		fake.listAWSDefaultServiceQuotasPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAWSDefaultServiceQuotasPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasRequest(arg1 *servicequotas.ListAWSDefaultServiceQuotasInput) (*request.Request, *servicequotas.ListAWSDefaultServiceQuotasOutput) {
	fake.listAWSDefaultServiceQuotasRequestMutex.Lock()
	ret, specificReturn := fake.listAWSDefaultServiceQuotasRequestReturnsOnCall[len(fake.listAWSDefaultServiceQuotasRequestArgsForCall)]
	fake.listAWSDefaultServiceQuotasRequestArgsForCall = append(fake.listAWSDefaultServiceQuotasRequestArgsForCall, struct {
		arg1 *servicequotas.ListAWSDefaultServiceQuotasInput
	}{arg1})
	stub := fake.ListAWSDefaultServiceQuotasRequestStub
	fakeReturns := fake.listAWSDefaultServiceQuotasRequestReturns
	fake.recordInvocation("ListAWSDefaultServiceQuotasRequest", []interface{}{arg1})
	fake.listAWSDefaultServiceQuotasRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasRequestCallCount() int {
	fake.listAWSDefaultServiceQuotasRequestMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasRequestMutex.RUnlock()
	return len(fake.listAWSDefaultServiceQuotasRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasRequestCalls(stub func(*servicequotas.ListAWSDefaultServiceQuotasInput) (*request.Request, *servicequotas.ListAWSDefaultServiceQuotasOutput)) {
	fake.listAWSDefaultServiceQuotasRequestMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasRequestMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasRequestArgsForCall(i int) *servicequotas.ListAWSDefaultServiceQuotasInput {
	fake.listAWSDefaultServiceQuotasRequestMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasRequestMutex.RUnlock()
	argsForCall := fake.listAWSDefaultServiceQuotasRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasRequestReturns(result1 *request.Request, result2 *servicequotas.ListAWSDefaultServiceQuotasOutput) {
	fake.listAWSDefaultServiceQuotasRequestMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasRequestMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasRequestStub = nil
	fake.listAWSDefaultServiceQuotasRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.ListAWSDefaultServiceQuotasOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.ListAWSDefaultServiceQuotasOutput) {
	fake.listAWSDefaultServiceQuotasRequestMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasRequestMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasRequestStub = nil
	if fake.listAWSDefaultServiceQuotasRequestReturnsOnCall == nil {
		fake.listAWSDefaultServiceQuotasRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.ListAWSDefaultServiceQuotasOutput
		})
	}
	fake.listAWSDefaultServiceQuotasRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.ListAWSDefaultServiceQuotasOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasWithContext(arg1 context.Context, arg2 *servicequotas.ListAWSDefaultServiceQuotasInput, arg3 ...request.Option) (*servicequotas.ListAWSDefaultServiceQuotasOutput, error) {
	fake.listAWSDefaultServiceQuotasWithContextMutex.Lock()
	ret, specificReturn := fake.listAWSDefaultServiceQuotasWithContextReturnsOnCall[len(fake.listAWSDefaultServiceQuotasWithContextArgsForCall)]
	fake.listAWSDefaultServiceQuotasWithContextArgsForCall = append(fake.listAWSDefaultServiceQuotasWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListAWSDefaultServiceQuotasInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListAWSDefaultServiceQuotasWithContextStub
	fakeReturns := fake.listAWSDefaultServiceQuotasWithContextReturns
	fake.recordInvocation("ListAWSDefaultServiceQuotasWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAWSDefaultServiceQuotasWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasWithContextCallCount() int {
	fake.listAWSDefaultServiceQuotasWithContextMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasWithContextMutex.RUnlock()
	return len(fake.listAWSDefaultServiceQuotasWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasWithContextCalls(stub func(context.Context, *servicequotas.ListAWSDefaultServiceQuotasInput, ...request.Option) (*servicequotas.ListAWSDefaultServiceQuotasOutput, error)) {
	fake.listAWSDefaultServiceQuotasWithContextMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasWithContextMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasWithContextArgsForCall(i int) (context.Context, *servicequotas.ListAWSDefaultServiceQuotasInput, []request.Option) {
	fake.listAWSDefaultServiceQuotasWithContextMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasWithContextMutex.RUnlock()
	argsForCall := fake.listAWSDefaultServiceQuotasWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasWithContextReturns(result1 *servicequotas.ListAWSDefaultServiceQuotasOutput, result2 error) {
	fake.listAWSDefaultServiceQuotasWithContextMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasWithContextMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasWithContextStub = nil
	fake.listAWSDefaultServiceQuotasWithContextReturns = struct {
		result1 *servicequotas.ListAWSDefaultServiceQuotasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListAWSDefaultServiceQuotasWithContextReturnsOnCall(i int, result1 *servicequotas.ListAWSDefaultServiceQuotasOutput, result2 error) {
	fake.listAWSDefaultServiceQuotasWithContextMutex.Lock()
	defer fake.listAWSDefaultServiceQuotasWithContextMutex.Unlock()
	fake.ListAWSDefaultServiceQuotasWithContextStub = nil
	if fake.listAWSDefaultServiceQuotasWithContextReturnsOnCall == nil {
		fake.listAWSDefaultServiceQuotasWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListAWSDefaultServiceQuotasOutput
			result2 error
		})
	}
	fake.listAWSDefaultServiceQuotasWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.ListAWSDefaultServiceQuotasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistory(arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput) (*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, error) {
	fake.listRequestedServiceQuotaChangeHistoryMutex.Lock()
	ret, specificReturn := fake.listRequestedServiceQuotaChangeHistoryReturnsOnCall[len(fake.listRequestedServiceQuotaChangeHistoryArgsForCall)]
	fake.listRequestedServiceQuotaChangeHistoryArgsForCall = append(fake.listRequestedServiceQuotaChangeHistoryArgsForCall, struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput
	}{arg1})
	stub := fake.ListRequestedServiceQuotaChangeHistoryStub
	fakeReturns := fake.listRequestedServiceQuotaChangeHistoryReturns
	fake.recordInvocation("ListRequestedServiceQuotaChangeHistory", []interface{}{arg1})
	fake.listRequestedServiceQuotaChangeHistoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryCallCount() int {
	fake.listRequestedServiceQuotaChangeHistoryMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryMutex.RUnlock()
	return len(fake.listRequestedServiceQuotaChangeHistoryArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryCalls(stub func(*servicequotas.ListRequestedServiceQuotaChangeHistoryInput) (*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, error)) {
	fake.listRequestedServiceQuotaChangeHistoryMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryStub = stub
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryArgsForCall(i int) *servicequotas.ListRequestedServiceQuotaChangeHistoryInput {
	fake.listRequestedServiceQuotaChangeHistoryMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryMutex.RUnlock()
	argsForCall := fake.listRequestedServiceQuotaChangeHistoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryReturns(result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, result2 error) {
	fake.listRequestedServiceQuotaChangeHistoryMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryStub = nil
	fake.listRequestedServiceQuotaChangeHistoryReturns = struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryReturnsOnCall(i int, result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, result2 error) {
	fake.listRequestedServiceQuotaChangeHistoryMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryStub = nil
	if fake.listRequestedServiceQuotaChangeHistoryReturnsOnCall == nil {
		fake.listRequestedServiceQuotaChangeHistoryReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
			result2 error
		})
	}
	fake.listRequestedServiceQuotaChangeHistoryReturnsOnCall[i] = struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuota(arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput) (*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.Lock()
	ret, specificReturn := fake.listRequestedServiceQuotaChangeHistoryByQuotaReturnsOnCall[len(fake.listRequestedServiceQuotaChangeHistoryByQuotaArgsForCall)]
	fake.listRequestedServiceQuotaChangeHistoryByQuotaArgsForCall = append(fake.listRequestedServiceQuotaChangeHistoryByQuotaArgsForCall, struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput
	}{arg1})
	stub := fake.ListRequestedServiceQuotaChangeHistoryByQuotaStub
	fakeReturns := fake.listRequestedServiceQuotaChangeHistoryByQuotaReturns
	fake.recordInvocation("ListRequestedServiceQuotaChangeHistoryByQuota", []interface{}{arg1})
	fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaCallCount() int {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.RUnlock()
	return len(fake.listRequestedServiceQuotaChangeHistoryByQuotaArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaCalls(stub func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput) (*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, error)) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaStub = stub
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaArgsForCall(i int) *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.RUnlock()
	argsForCall := fake.listRequestedServiceQuotaChangeHistoryByQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaReturns(result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, result2 error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaStub = nil
	fake.listRequestedServiceQuotaChangeHistoryByQuotaReturns = struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaReturnsOnCall(i int, result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, result2 error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaStub = nil
	if fake.listRequestedServiceQuotaChangeHistoryByQuotaReturnsOnCall == nil {
		fake.listRequestedServiceQuotaChangeHistoryByQuotaReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
			result2 error
		})
	}
	fake.listRequestedServiceQuotaChangeHistoryByQuotaReturnsOnCall[i] = struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPages(arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, arg2 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool) error {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.Lock()
	ret, specificReturn := fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesReturnsOnCall[len(fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesArgsForCall)]
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesArgsForCall = append(fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesArgsForCall, struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput
		arg2 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListRequestedServiceQuotaChangeHistoryByQuotaPagesStub
	fakeReturns := fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesReturns
	fake.recordInvocation("ListRequestedServiceQuotaChangeHistoryByQuotaPages", []interface{}{arg1, arg2})
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPagesCallCount() int {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.RUnlock()
	return len(fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPagesCalls(stub func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool) error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaPagesStub = stub
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPagesArgsForCall(i int) (*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.RUnlock()
	argsForCall := fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPagesReturns(result1 error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaPagesStub = nil
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPagesReturnsOnCall(i int, result1 error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaPagesStub = nil
	if fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesReturnsOnCall == nil {
		fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContext(arg1 context.Context, arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, arg3 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool, arg4 ...request.Option) error {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextReturnsOnCall[len(fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextArgsForCall)]
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextArgsForCall = append(fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput
		arg3 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextStub
	fakeReturns := fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextReturns
	fake.recordInvocation("ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextCallCount() int {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.RUnlock()
	return len(fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextCalls(stub func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool, ...request.Option) error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextArgsForCall(i int) (context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, bool) bool, []request.Option) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.RUnlock()
	argsForCall := fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextReturns(result1 error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextStub = nil
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextStub = nil
	if fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextReturnsOnCall == nil {
		fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaRequest(arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput) (*request.Request, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.Lock()
	ret, specificReturn := fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestReturnsOnCall[len(fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestArgsForCall)]
	fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestArgsForCall = append(fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestArgsForCall, struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput
	}{arg1})
	stub := fake.ListRequestedServiceQuotaChangeHistoryByQuotaRequestStub
	fakeReturns := fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestReturns
	fake.recordInvocation("ListRequestedServiceQuotaChangeHistoryByQuotaRequest", []interface{}{arg1})
	fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaRequestCallCount() int {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.RUnlock()
	return len(fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaRequestCalls(stub func(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput) (*request.Request, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput)) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaRequestArgsForCall(i int) *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.RUnlock()
	argsForCall := fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaRequestReturns(result1 *request.Request, result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaRequestStub = nil
	fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaRequestStub = nil
	if fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestReturnsOnCall == nil {
		fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
		})
	}
	fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaWithContext(arg1 context.Context, arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, arg3 ...request.Option) (*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.Lock()
	ret, specificReturn := fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextReturnsOnCall[len(fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextArgsForCall)]
	fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextArgsForCall = append(fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListRequestedServiceQuotaChangeHistoryByQuotaWithContextStub
	fakeReturns := fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextReturns
	fake.recordInvocation("ListRequestedServiceQuotaChangeHistoryByQuotaWithContext", []interface{}{arg1, arg2, arg3})
	fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaWithContextCallCount() int {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.RUnlock()
	return len(fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaWithContextCalls(stub func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, ...request.Option) (*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, error)) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaWithContextArgsForCall(i int) (context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, []request.Option) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.RUnlock()
	argsForCall := fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaWithContextReturns(result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, result2 error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaWithContextStub = nil
	fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextReturns = struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryByQuotaWithContextReturnsOnCall(i int, result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, result2 error) {
	fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryByQuotaWithContextStub = nil
	if fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextReturnsOnCall == nil {
		fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
			result2 error
		})
	}
	fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPages(arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, arg2 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool) error {
	fake.listRequestedServiceQuotaChangeHistoryPagesMutex.Lock()
	ret, specificReturn := fake.listRequestedServiceQuotaChangeHistoryPagesReturnsOnCall[len(fake.listRequestedServiceQuotaChangeHistoryPagesArgsForCall)]
	fake.listRequestedServiceQuotaChangeHistoryPagesArgsForCall = append(fake.listRequestedServiceQuotaChangeHistoryPagesArgsForCall, struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput
		arg2 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListRequestedServiceQuotaChangeHistoryPagesStub
	fakeReturns := fake.listRequestedServiceQuotaChangeHistoryPagesReturns
	fake.recordInvocation("ListRequestedServiceQuotaChangeHistoryPages", []interface{}{arg1, arg2})
	fake.listRequestedServiceQuotaChangeHistoryPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPagesCallCount() int {
	fake.listRequestedServiceQuotaChangeHistoryPagesMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesMutex.RUnlock()
	return len(fake.listRequestedServiceQuotaChangeHistoryPagesArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPagesCalls(stub func(*servicequotas.ListRequestedServiceQuotaChangeHistoryInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool) error) {
	fake.listRequestedServiceQuotaChangeHistoryPagesMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryPagesStub = stub
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPagesArgsForCall(i int) (*servicequotas.ListRequestedServiceQuotaChangeHistoryInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool) {
	fake.listRequestedServiceQuotaChangeHistoryPagesMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesMutex.RUnlock()
	argsForCall := fake.listRequestedServiceQuotaChangeHistoryPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPagesReturns(result1 error) {
	fake.listRequestedServiceQuotaChangeHistoryPagesMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryPagesStub = nil
	fake.listRequestedServiceQuotaChangeHistoryPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPagesReturnsOnCall(i int, result1 error) {
	fake.listRequestedServiceQuotaChangeHistoryPagesMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryPagesStub = nil
	if fake.listRequestedServiceQuotaChangeHistoryPagesReturnsOnCall == nil {
		fake.listRequestedServiceQuotaChangeHistoryPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listRequestedServiceQuotaChangeHistoryPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPagesWithContext(arg1 context.Context, arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, arg3 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool, arg4 ...request.Option) error {
	fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listRequestedServiceQuotaChangeHistoryPagesWithContextReturnsOnCall[len(fake.listRequestedServiceQuotaChangeHistoryPagesWithContextArgsForCall)]
	fake.listRequestedServiceQuotaChangeHistoryPagesWithContextArgsForCall = append(fake.listRequestedServiceQuotaChangeHistoryPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput
		arg3 func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListRequestedServiceQuotaChangeHistoryPagesWithContextStub
	fakeReturns := fake.listRequestedServiceQuotaChangeHistoryPagesWithContextReturns
	fake.recordInvocation("ListRequestedServiceQuotaChangeHistoryPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPagesWithContextCallCount() int {
	fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.RUnlock()
	return len(fake.listRequestedServiceQuotaChangeHistoryPagesWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPagesWithContextCalls(stub func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool, ...request.Option) error) {
	fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryPagesWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPagesWithContextArgsForCall(i int) (context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, func(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, bool) bool, []request.Option) {
	fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.RUnlock()
	argsForCall := fake.listRequestedServiceQuotaChangeHistoryPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPagesWithContextReturns(result1 error) {
	fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryPagesWithContextStub = nil
	fake.listRequestedServiceQuotaChangeHistoryPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryPagesWithContextStub = nil
	if fake.listRequestedServiceQuotaChangeHistoryPagesWithContextReturnsOnCall == nil {
		fake.listRequestedServiceQuotaChangeHistoryPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listRequestedServiceQuotaChangeHistoryPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryRequest(arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput) (*request.Request, *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput) {
	fake.listRequestedServiceQuotaChangeHistoryRequestMutex.Lock()
	ret, specificReturn := fake.listRequestedServiceQuotaChangeHistoryRequestReturnsOnCall[len(fake.listRequestedServiceQuotaChangeHistoryRequestArgsForCall)]
	fake.listRequestedServiceQuotaChangeHistoryRequestArgsForCall = append(fake.listRequestedServiceQuotaChangeHistoryRequestArgsForCall, struct {
		arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput
	}{arg1})
	stub := fake.ListRequestedServiceQuotaChangeHistoryRequestStub
	fakeReturns := fake.listRequestedServiceQuotaChangeHistoryRequestReturns
	fake.recordInvocation("ListRequestedServiceQuotaChangeHistoryRequest", []interface{}{arg1})
	fake.listRequestedServiceQuotaChangeHistoryRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryRequestCallCount() int {
	fake.listRequestedServiceQuotaChangeHistoryRequestMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryRequestMutex.RUnlock()
	return len(fake.listRequestedServiceQuotaChangeHistoryRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryRequestCalls(stub func(*servicequotas.ListRequestedServiceQuotaChangeHistoryInput) (*request.Request, *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput)) {
	fake.listRequestedServiceQuotaChangeHistoryRequestMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryRequestMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryRequestArgsForCall(i int) *servicequotas.ListRequestedServiceQuotaChangeHistoryInput {
	fake.listRequestedServiceQuotaChangeHistoryRequestMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryRequestMutex.RUnlock()
	argsForCall := fake.listRequestedServiceQuotaChangeHistoryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryRequestReturns(result1 *request.Request, result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput) {
	fake.listRequestedServiceQuotaChangeHistoryRequestMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryRequestMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryRequestStub = nil
	fake.listRequestedServiceQuotaChangeHistoryRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput) {
	fake.listRequestedServiceQuotaChangeHistoryRequestMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryRequestMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryRequestStub = nil
	if fake.listRequestedServiceQuotaChangeHistoryRequestReturnsOnCall == nil {
		fake.listRequestedServiceQuotaChangeHistoryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
		})
	}
	fake.listRequestedServiceQuotaChangeHistoryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryWithContext(arg1 context.Context, arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, arg3 ...request.Option) (*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, error) {
	fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.Lock()
	ret, specificReturn := fake.listRequestedServiceQuotaChangeHistoryWithContextReturnsOnCall[len(fake.listRequestedServiceQuotaChangeHistoryWithContextArgsForCall)]
	fake.listRequestedServiceQuotaChangeHistoryWithContextArgsForCall = append(fake.listRequestedServiceQuotaChangeHistoryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListRequestedServiceQuotaChangeHistoryWithContextStub
	fakeReturns := fake.listRequestedServiceQuotaChangeHistoryWithContextReturns
	fake.recordInvocation("ListRequestedServiceQuotaChangeHistoryWithContext", []interface{}{arg1, arg2, arg3})
	fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryWithContextCallCount() int {
	fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.RUnlock()
	return len(fake.listRequestedServiceQuotaChangeHistoryWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryWithContextCalls(stub func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, ...request.Option) (*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, error)) {
	fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryWithContextArgsForCall(i int) (context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, []request.Option) {
	fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.RUnlock()
	argsForCall := fake.listRequestedServiceQuotaChangeHistoryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryWithContextReturns(result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, result2 error) {
	fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryWithContextStub = nil
	fake.listRequestedServiceQuotaChangeHistoryWithContextReturns = struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListRequestedServiceQuotaChangeHistoryWithContextReturnsOnCall(i int, result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, result2 error) {
	fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.Lock()
	defer fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.Unlock()
	fake.ListRequestedServiceQuotaChangeHistoryWithContextStub = nil
	if fake.listRequestedServiceQuotaChangeHistoryWithContextReturnsOnCall == nil {
		fake.listRequestedServiceQuotaChangeHistoryWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
			result2 error
		})
	}
	fake.listRequestedServiceQuotaChangeHistoryWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplate(arg1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput) (*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, error) {
	fake.listServiceQuotaIncreaseRequestsInTemplateMutex.Lock()
	ret, specificReturn := fake.listServiceQuotaIncreaseRequestsInTemplateReturnsOnCall[len(fake.listServiceQuotaIncreaseRequestsInTemplateArgsForCall)]
	fake.listServiceQuotaIncreaseRequestsInTemplateArgsForCall = append(fake.listServiceQuotaIncreaseRequestsInTemplateArgsForCall, struct {
		arg1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput
	}{arg1})
	stub := fake.ListServiceQuotaIncreaseRequestsInTemplateStub
	fakeReturns := fake.listServiceQuotaIncreaseRequestsInTemplateReturns
	fake.recordInvocation("ListServiceQuotaIncreaseRequestsInTemplate", []interface{}{arg1})
	fake.listServiceQuotaIncreaseRequestsInTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateCallCount() int {
	fake.listServiceQuotaIncreaseRequestsInTemplateMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateMutex.RUnlock()
	return len(fake.listServiceQuotaIncreaseRequestsInTemplateArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateCalls(stub func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput) (*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, error)) {
	fake.listServiceQuotaIncreaseRequestsInTemplateMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplateStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateArgsForCall(i int) *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput {
	fake.listServiceQuotaIncreaseRequestsInTemplateMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateMutex.RUnlock()
	argsForCall := fake.listServiceQuotaIncreaseRequestsInTemplateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateReturns(result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, result2 error) {
	fake.listServiceQuotaIncreaseRequestsInTemplateMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplateStub = nil
	fake.listServiceQuotaIncreaseRequestsInTemplateReturns = struct {
		result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateReturnsOnCall(i int, result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, result2 error) {
	fake.listServiceQuotaIncreaseRequestsInTemplateMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplateStub = nil
	if fake.listServiceQuotaIncreaseRequestsInTemplateReturnsOnCall == nil {
		fake.listServiceQuotaIncreaseRequestsInTemplateReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
			result2 error
		})
	}
	fake.listServiceQuotaIncreaseRequestsInTemplateReturnsOnCall[i] = struct {
		result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePages(arg1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, arg2 func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool) error {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.Lock()
	ret, specificReturn := fake.listServiceQuotaIncreaseRequestsInTemplatePagesReturnsOnCall[len(fake.listServiceQuotaIncreaseRequestsInTemplatePagesArgsForCall)]
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesArgsForCall = append(fake.listServiceQuotaIncreaseRequestsInTemplatePagesArgsForCall, struct {
		arg1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput
		arg2 func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListServiceQuotaIncreaseRequestsInTemplatePagesStub
	fakeReturns := fake.listServiceQuotaIncreaseRequestsInTemplatePagesReturns
	fake.recordInvocation("ListServiceQuotaIncreaseRequestsInTemplatePages", []interface{}{arg1, arg2})
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePagesCallCount() int {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.RUnlock()
	return len(fake.listServiceQuotaIncreaseRequestsInTemplatePagesArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePagesCalls(stub func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool) error) {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplatePagesStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePagesArgsForCall(i int) (*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool) {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.RUnlock()
	argsForCall := fake.listServiceQuotaIncreaseRequestsInTemplatePagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePagesReturns(result1 error) {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplatePagesStub = nil
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePagesReturnsOnCall(i int, result1 error) {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplatePagesStub = nil
	if fake.listServiceQuotaIncreaseRequestsInTemplatePagesReturnsOnCall == nil {
		fake.listServiceQuotaIncreaseRequestsInTemplatePagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePagesWithContext(arg1 context.Context, arg2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, arg3 func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool, arg4 ...request.Option) error {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.Lock()
	ret, specificReturn := fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextReturnsOnCall[len(fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextArgsForCall)]
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextArgsForCall = append(fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput
		arg3 func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListServiceQuotaIncreaseRequestsInTemplatePagesWithContextStub
	fakeReturns := fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextReturns
	fake.recordInvocation("ListServiceQuotaIncreaseRequestsInTemplatePagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePagesWithContextCallCount() int {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.RUnlock()
	return len(fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePagesWithContextCalls(stub func(context.Context, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool, ...request.Option) error) {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplatePagesWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePagesWithContextArgsForCall(i int) (context.Context, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, bool) bool, []request.Option) {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.RUnlock()
	argsForCall := fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePagesWithContextReturns(result1 error) {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplatePagesWithContextStub = nil
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplatePagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplatePagesWithContextStub = nil
	if fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextReturnsOnCall == nil {
		fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateRequest(arg1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput) (*request.Request, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput) {
	fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.Lock()
	ret, specificReturn := fake.listServiceQuotaIncreaseRequestsInTemplateRequestReturnsOnCall[len(fake.listServiceQuotaIncreaseRequestsInTemplateRequestArgsForCall)]
	fake.listServiceQuotaIncreaseRequestsInTemplateRequestArgsForCall = append(fake.listServiceQuotaIncreaseRequestsInTemplateRequestArgsForCall, struct {
		arg1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput
	}{arg1})
	stub := fake.ListServiceQuotaIncreaseRequestsInTemplateRequestStub
	fakeReturns := fake.listServiceQuotaIncreaseRequestsInTemplateRequestReturns
	fake.recordInvocation("ListServiceQuotaIncreaseRequestsInTemplateRequest", []interface{}{arg1})
	fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateRequestCallCount() int {
	fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.RUnlock()
	return len(fake.listServiceQuotaIncreaseRequestsInTemplateRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateRequestCalls(stub func(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput) (*request.Request, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput)) {
	fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplateRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateRequestArgsForCall(i int) *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput {
	fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.RUnlock()
	argsForCall := fake.listServiceQuotaIncreaseRequestsInTemplateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateRequestReturns(result1 *request.Request, result2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput) {
	fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplateRequestStub = nil
	fake.listServiceQuotaIncreaseRequestsInTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput) {
	fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplateRequestStub = nil
	if fake.listServiceQuotaIncreaseRequestsInTemplateRequestReturnsOnCall == nil {
		fake.listServiceQuotaIncreaseRequestsInTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
		})
	}
	fake.listServiceQuotaIncreaseRequestsInTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateWithContext(arg1 context.Context, arg2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, arg3 ...request.Option) (*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, error) {
	fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.listServiceQuotaIncreaseRequestsInTemplateWithContextReturnsOnCall[len(fake.listServiceQuotaIncreaseRequestsInTemplateWithContextArgsForCall)]
	fake.listServiceQuotaIncreaseRequestsInTemplateWithContextArgsForCall = append(fake.listServiceQuotaIncreaseRequestsInTemplateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListServiceQuotaIncreaseRequestsInTemplateWithContextStub
	fakeReturns := fake.listServiceQuotaIncreaseRequestsInTemplateWithContextReturns
	fake.recordInvocation("ListServiceQuotaIncreaseRequestsInTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateWithContextCallCount() int {
	fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.RUnlock()
	return len(fake.listServiceQuotaIncreaseRequestsInTemplateWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateWithContextCalls(stub func(context.Context, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, ...request.Option) (*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, error)) {
	fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplateWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateWithContextArgsForCall(i int) (context.Context, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, []request.Option) {
	fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.RUnlock()
	argsForCall := fake.listServiceQuotaIncreaseRequestsInTemplateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateWithContextReturns(result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, result2 error) {
	fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplateWithContextStub = nil
	fake.listServiceQuotaIncreaseRequestsInTemplateWithContextReturns = struct {
		result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotaIncreaseRequestsInTemplateWithContextReturnsOnCall(i int, result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, result2 error) {
	fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.Lock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.Unlock()
	fake.ListServiceQuotaIncreaseRequestsInTemplateWithContextStub = nil
	if fake.listServiceQuotaIncreaseRequestsInTemplateWithContextReturnsOnCall == nil {
		fake.listServiceQuotaIncreaseRequestsInTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
			result2 error
		})
	}
	fake.listServiceQuotaIncreaseRequestsInTemplateWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotas(arg1 *servicequotas.ListServiceQuotasInput) (*servicequotas.ListServiceQuotasOutput, error) {
	fake.listServiceQuotasMutex.Lock()
	ret, specificReturn := fake.listServiceQuotasReturnsOnCall[len(fake.listServiceQuotasArgsForCall)]
	fake.listServiceQuotasArgsForCall = append(fake.listServiceQuotasArgsForCall, struct {
		arg1 *servicequotas.ListServiceQuotasInput
	}{arg1})
	stub := fake.ListServiceQuotasStub
	fakeReturns := fake.listServiceQuotasReturns
	fake.recordInvocation("ListServiceQuotas", []interface{}{arg1})
	fake.listServiceQuotasMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasCallCount() int {
	fake.listServiceQuotasMutex.RLock()
	defer fake.listServiceQuotasMutex.RUnlock()
	return len(fake.listServiceQuotasArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasCalls(stub func(*servicequotas.ListServiceQuotasInput) (*servicequotas.ListServiceQuotasOutput, error)) {
	fake.listServiceQuotasMutex.Lock()
	defer fake.listServiceQuotasMutex.Unlock()
	fake.ListServiceQuotasStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasArgsForCall(i int) *servicequotas.ListServiceQuotasInput {
	fake.listServiceQuotasMutex.RLock()
	defer fake.listServiceQuotasMutex.RUnlock()
	argsForCall := fake.listServiceQuotasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasReturns(result1 *servicequotas.ListServiceQuotasOutput, result2 error) {
	fake.listServiceQuotasMutex.Lock()
	defer fake.listServiceQuotasMutex.Unlock()
	fake.ListServiceQuotasStub = nil
	fake.listServiceQuotasReturns = struct {
		result1 *servicequotas.ListServiceQuotasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasReturnsOnCall(i int, result1 *servicequotas.ListServiceQuotasOutput, result2 error) {
	fake.listServiceQuotasMutex.Lock()
	defer fake.listServiceQuotasMutex.Unlock()
	fake.ListServiceQuotasStub = nil
	if fake.listServiceQuotasReturnsOnCall == nil {
		fake.listServiceQuotasReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListServiceQuotasOutput
			result2 error
		})
	}
	fake.listServiceQuotasReturnsOnCall[i] = struct {
		result1 *servicequotas.ListServiceQuotasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPages(arg1 *servicequotas.ListServiceQuotasInput, arg2 func(*servicequotas.ListServiceQuotasOutput, bool) bool) error {
	fake.listServiceQuotasPagesMutex.Lock()
	ret, specificReturn := fake.listServiceQuotasPagesReturnsOnCall[len(fake.listServiceQuotasPagesArgsForCall)]
	fake.listServiceQuotasPagesArgsForCall = append(fake.listServiceQuotasPagesArgsForCall, struct {
		arg1 *servicequotas.ListServiceQuotasInput
		arg2 func(*servicequotas.ListServiceQuotasOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListServiceQuotasPagesStub
	fakeReturns := fake.listServiceQuotasPagesReturns
	fake.recordInvocation("ListServiceQuotasPages", []interface{}{arg1, arg2})
	fake.listServiceQuotasPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPagesCallCount() int {
	fake.listServiceQuotasPagesMutex.RLock()
	defer fake.listServiceQuotasPagesMutex.RUnlock()
	return len(fake.listServiceQuotasPagesArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPagesCalls(stub func(*servicequotas.ListServiceQuotasInput, func(*servicequotas.ListServiceQuotasOutput, bool) bool) error) {
	fake.listServiceQuotasPagesMutex.Lock()
	defer fake.listServiceQuotasPagesMutex.Unlock()
	fake.ListServiceQuotasPagesStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPagesArgsForCall(i int) (*servicequotas.ListServiceQuotasInput, func(*servicequotas.ListServiceQuotasOutput, bool) bool) {
	fake.listServiceQuotasPagesMutex.RLock()
	defer fake.listServiceQuotasPagesMutex.RUnlock()
	argsForCall := fake.listServiceQuotasPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPagesReturns(result1 error) {
	fake.listServiceQuotasPagesMutex.Lock()
	defer fake.listServiceQuotasPagesMutex.Unlock()
	fake.ListServiceQuotasPagesStub = nil
	fake.listServiceQuotasPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPagesReturnsOnCall(i int, result1 error) {
	fake.listServiceQuotasPagesMutex.Lock()
	defer fake.listServiceQuotasPagesMutex.Unlock()
	fake.ListServiceQuotasPagesStub = nil
	if fake.listServiceQuotasPagesReturnsOnCall == nil {
		fake.listServiceQuotasPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listServiceQuotasPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPagesWithContext(arg1 context.Context, arg2 *servicequotas.ListServiceQuotasInput, arg3 func(*servicequotas.ListServiceQuotasOutput, bool) bool, arg4 ...request.Option) error {
	fake.listServiceQuotasPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listServiceQuotasPagesWithContextReturnsOnCall[len(fake.listServiceQuotasPagesWithContextArgsForCall)]
	fake.listServiceQuotasPagesWithContextArgsForCall = append(fake.listServiceQuotasPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListServiceQuotasInput
		arg3 func(*servicequotas.ListServiceQuotasOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListServiceQuotasPagesWithContextStub
	fakeReturns := fake.listServiceQuotasPagesWithContextReturns
	fake.recordInvocation("ListServiceQuotasPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listServiceQuotasPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPagesWithContextCallCount() int {
	fake.listServiceQuotasPagesWithContextMutex.RLock()
	defer fake.listServiceQuotasPagesWithContextMutex.RUnlock()
	return len(fake.listServiceQuotasPagesWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPagesWithContextCalls(stub func(context.Context, *servicequotas.ListServiceQuotasInput, func(*servicequotas.ListServiceQuotasOutput, bool) bool, ...request.Option) error) {
	fake.listServiceQuotasPagesWithContextMutex.Lock()
	defer fake.listServiceQuotasPagesWithContextMutex.Unlock()
	fake.ListServiceQuotasPagesWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPagesWithContextArgsForCall(i int) (context.Context, *servicequotas.ListServiceQuotasInput, func(*servicequotas.ListServiceQuotasOutput, bool) bool, []request.Option) {
	fake.listServiceQuotasPagesWithContextMutex.RLock()
	defer fake.listServiceQuotasPagesWithContextMutex.RUnlock()
	argsForCall := fake.listServiceQuotasPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPagesWithContextReturns(result1 error) {
	fake.listServiceQuotasPagesWithContextMutex.Lock()
	defer fake.listServiceQuotasPagesWithContextMutex.Unlock()
	fake.ListServiceQuotasPagesWithContextStub = nil
	fake.listServiceQuotasPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listServiceQuotasPagesWithContextMutex.Lock()
	defer fake.listServiceQuotasPagesWithContextMutex.Unlock()
	fake.ListServiceQuotasPagesWithContextStub = nil
	if fake.listServiceQuotasPagesWithContextReturnsOnCall == nil {
		fake.listServiceQuotasPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listServiceQuotasPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasRequest(arg1 *servicequotas.ListServiceQuotasInput) (*request.Request, *servicequotas.ListServiceQuotasOutput) {
	fake.listServiceQuotasRequestMutex.Lock()
	ret, specificReturn := fake.listServiceQuotasRequestReturnsOnCall[len(fake.listServiceQuotasRequestArgsForCall)]
	fake.listServiceQuotasRequestArgsForCall = append(fake.listServiceQuotasRequestArgsForCall, struct {
		arg1 *servicequotas.ListServiceQuotasInput
	}{arg1})
	stub := fake.ListServiceQuotasRequestStub
	fakeReturns := fake.listServiceQuotasRequestReturns
	fake.recordInvocation("ListServiceQuotasRequest", []interface{}{arg1})
	fake.listServiceQuotasRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasRequestCallCount() int {
	fake.listServiceQuotasRequestMutex.RLock()
	defer fake.listServiceQuotasRequestMutex.RUnlock()
	return len(fake.listServiceQuotasRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasRequestCalls(stub func(*servicequotas.ListServiceQuotasInput) (*request.Request, *servicequotas.ListServiceQuotasOutput)) {
	fake.listServiceQuotasRequestMutex.Lock()
	defer fake.listServiceQuotasRequestMutex.Unlock()
	fake.ListServiceQuotasRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasRequestArgsForCall(i int) *servicequotas.ListServiceQuotasInput {
	fake.listServiceQuotasRequestMutex.RLock()
	defer fake.listServiceQuotasRequestMutex.RUnlock()
	argsForCall := fake.listServiceQuotasRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasRequestReturns(result1 *request.Request, result2 *servicequotas.ListServiceQuotasOutput) {
	fake.listServiceQuotasRequestMutex.Lock()
	defer fake.listServiceQuotasRequestMutex.Unlock()
	fake.ListServiceQuotasRequestStub = nil
	fake.listServiceQuotasRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.ListServiceQuotasOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.ListServiceQuotasOutput) {
	fake.listServiceQuotasRequestMutex.Lock()
	defer fake.listServiceQuotasRequestMutex.Unlock()
	fake.ListServiceQuotasRequestStub = nil
	if fake.listServiceQuotasRequestReturnsOnCall == nil {
		fake.listServiceQuotasRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.ListServiceQuotasOutput
		})
	}
	fake.listServiceQuotasRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.ListServiceQuotasOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasWithContext(arg1 context.Context, arg2 *servicequotas.ListServiceQuotasInput, arg3 ...request.Option) (*servicequotas.ListServiceQuotasOutput, error) {
	fake.listServiceQuotasWithContextMutex.Lock()
	ret, specificReturn := fake.listServiceQuotasWithContextReturnsOnCall[len(fake.listServiceQuotasWithContextArgsForCall)]
	fake.listServiceQuotasWithContextArgsForCall = append(fake.listServiceQuotasWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListServiceQuotasInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListServiceQuotasWithContextStub
	fakeReturns := fake.listServiceQuotasWithContextReturns
	fake.recordInvocation("ListServiceQuotasWithContext", []interface{}{arg1, arg2, arg3})
	fake.listServiceQuotasWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasWithContextCallCount() int {
	fake.listServiceQuotasWithContextMutex.RLock()
	defer fake.listServiceQuotasWithContextMutex.RUnlock()
	return len(fake.listServiceQuotasWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasWithContextCalls(stub func(context.Context, *servicequotas.ListServiceQuotasInput, ...request.Option) (*servicequotas.ListServiceQuotasOutput, error)) {
	fake.listServiceQuotasWithContextMutex.Lock()
	defer fake.listServiceQuotasWithContextMutex.Unlock()
	fake.ListServiceQuotasWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasWithContextArgsForCall(i int) (context.Context, *servicequotas.ListServiceQuotasInput, []request.Option) {
	fake.listServiceQuotasWithContextMutex.RLock()
	defer fake.listServiceQuotasWithContextMutex.RUnlock()
	argsForCall := fake.listServiceQuotasWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasWithContextReturns(result1 *servicequotas.ListServiceQuotasOutput, result2 error) {
	fake.listServiceQuotasWithContextMutex.Lock()
	defer fake.listServiceQuotasWithContextMutex.Unlock()
	fake.ListServiceQuotasWithContextStub = nil
	fake.listServiceQuotasWithContextReturns = struct {
		result1 *servicequotas.ListServiceQuotasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServiceQuotasWithContextReturnsOnCall(i int, result1 *servicequotas.ListServiceQuotasOutput, result2 error) {
	fake.listServiceQuotasWithContextMutex.Lock()
	defer fake.listServiceQuotasWithContextMutex.Unlock()
	fake.ListServiceQuotasWithContextStub = nil
	if fake.listServiceQuotasWithContextReturnsOnCall == nil {
		fake.listServiceQuotasWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListServiceQuotasOutput
			result2 error
		})
	}
	fake.listServiceQuotasWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.ListServiceQuotasOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServices(arg1 *servicequotas.ListServicesInput) (*servicequotas.ListServicesOutput, error) {
	fake.listServicesMutex.Lock()
	ret, specificReturn := fake.listServicesReturnsOnCall[len(fake.listServicesArgsForCall)]
	fake.listServicesArgsForCall = append(fake.listServicesArgsForCall, struct {
		arg1 *servicequotas.ListServicesInput
	}{arg1})
	stub := fake.ListServicesStub
	fakeReturns := fake.listServicesReturns
	fake.recordInvocation("ListServices", []interface{}{arg1})
	fake.listServicesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListServicesCallCount() int {
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	return len(fake.listServicesArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServicesCalls(stub func(*servicequotas.ListServicesInput) (*servicequotas.ListServicesOutput, error)) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServicesArgsForCall(i int) *servicequotas.ListServicesInput {
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	argsForCall := fake.listServicesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListServicesReturns(result1 *servicequotas.ListServicesOutput, result2 error) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = nil
	fake.listServicesReturns = struct {
		result1 *servicequotas.ListServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServicesReturnsOnCall(i int, result1 *servicequotas.ListServicesOutput, result2 error) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = nil
	if fake.listServicesReturnsOnCall == nil {
		fake.listServicesReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListServicesOutput
			result2 error
		})
	}
	fake.listServicesReturnsOnCall[i] = struct {
		result1 *servicequotas.ListServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServicesPages(arg1 *servicequotas.ListServicesInput, arg2 func(*servicequotas.ListServicesOutput, bool) bool) error {
	fake.listServicesPagesMutex.Lock()
	ret, specificReturn := fake.listServicesPagesReturnsOnCall[len(fake.listServicesPagesArgsForCall)]
	fake.listServicesPagesArgsForCall = append(fake.listServicesPagesArgsForCall, struct {
		arg1 *servicequotas.ListServicesInput
		arg2 func(*servicequotas.ListServicesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListServicesPagesStub
	fakeReturns := fake.listServicesPagesReturns
	fake.recordInvocation("ListServicesPages", []interface{}{arg1, arg2})
	fake.listServicesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListServicesPagesCallCount() int {
	fake.listServicesPagesMutex.RLock()
	defer fake.listServicesPagesMutex.RUnlock()
	return len(fake.listServicesPagesArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServicesPagesCalls(stub func(*servicequotas.ListServicesInput, func(*servicequotas.ListServicesOutput, bool) bool) error) {
	fake.listServicesPagesMutex.Lock()
	defer fake.listServicesPagesMutex.Unlock()
	fake.ListServicesPagesStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServicesPagesArgsForCall(i int) (*servicequotas.ListServicesInput, func(*servicequotas.ListServicesOutput, bool) bool) {
	fake.listServicesPagesMutex.RLock()
	defer fake.listServicesPagesMutex.RUnlock()
	argsForCall := fake.listServicesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceQuotasAPI) ListServicesPagesReturns(result1 error) {
	fake.listServicesPagesMutex.Lock()
	defer fake.listServicesPagesMutex.Unlock()
	fake.ListServicesPagesStub = nil
	fake.listServicesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServicesPagesReturnsOnCall(i int, result1 error) {
	fake.listServicesPagesMutex.Lock()
	defer fake.listServicesPagesMutex.Unlock()
	fake.ListServicesPagesStub = nil
	if fake.listServicesPagesReturnsOnCall == nil {
		fake.listServicesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listServicesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServicesPagesWithContext(arg1 context.Context, arg2 *servicequotas.ListServicesInput, arg3 func(*servicequotas.ListServicesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listServicesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listServicesPagesWithContextReturnsOnCall[len(fake.listServicesPagesWithContextArgsForCall)]
	fake.listServicesPagesWithContextArgsForCall = append(fake.listServicesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListServicesInput
		arg3 func(*servicequotas.ListServicesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListServicesPagesWithContextStub
	fakeReturns := fake.listServicesPagesWithContextReturns
	fake.recordInvocation("ListServicesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listServicesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceQuotasAPI) ListServicesPagesWithContextCallCount() int {
	fake.listServicesPagesWithContextMutex.RLock()
	defer fake.listServicesPagesWithContextMutex.RUnlock()
	return len(fake.listServicesPagesWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServicesPagesWithContextCalls(stub func(context.Context, *servicequotas.ListServicesInput, func(*servicequotas.ListServicesOutput, bool) bool, ...request.Option) error) {
	fake.listServicesPagesWithContextMutex.Lock()
	defer fake.listServicesPagesWithContextMutex.Unlock()
	fake.ListServicesPagesWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServicesPagesWithContextArgsForCall(i int) (context.Context, *servicequotas.ListServicesInput, func(*servicequotas.ListServicesOutput, bool) bool, []request.Option) {
	fake.listServicesPagesWithContextMutex.RLock()
	defer fake.listServicesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listServicesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeServiceQuotasAPI) ListServicesPagesWithContextReturns(result1 error) {
	fake.listServicesPagesWithContextMutex.Lock()
	defer fake.listServicesPagesWithContextMutex.Unlock()
	fake.ListServicesPagesWithContextStub = nil
	fake.listServicesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServicesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listServicesPagesWithContextMutex.Lock()
	defer fake.listServicesPagesWithContextMutex.Unlock()
	fake.ListServicesPagesWithContextStub = nil
	if fake.listServicesPagesWithContextReturnsOnCall == nil {
		fake.listServicesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listServicesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceQuotasAPI) ListServicesRequest(arg1 *servicequotas.ListServicesInput) (*request.Request, *servicequotas.ListServicesOutput) {
	fake.listServicesRequestMutex.Lock()
	ret, specificReturn := fake.listServicesRequestReturnsOnCall[len(fake.listServicesRequestArgsForCall)]
	fake.listServicesRequestArgsForCall = append(fake.listServicesRequestArgsForCall, struct {
		arg1 *servicequotas.ListServicesInput
	}{arg1})
	stub := fake.ListServicesRequestStub
	fakeReturns := fake.listServicesRequestReturns
	fake.recordInvocation("ListServicesRequest", []interface{}{arg1})
	fake.listServicesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListServicesRequestCallCount() int {
	fake.listServicesRequestMutex.RLock()
	defer fake.listServicesRequestMutex.RUnlock()
	return len(fake.listServicesRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServicesRequestCalls(stub func(*servicequotas.ListServicesInput) (*request.Request, *servicequotas.ListServicesOutput)) {
	fake.listServicesRequestMutex.Lock()
	defer fake.listServicesRequestMutex.Unlock()
	fake.ListServicesRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServicesRequestArgsForCall(i int) *servicequotas.ListServicesInput {
	fake.listServicesRequestMutex.RLock()
	defer fake.listServicesRequestMutex.RUnlock()
	argsForCall := fake.listServicesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) ListServicesRequestReturns(result1 *request.Request, result2 *servicequotas.ListServicesOutput) {
	fake.listServicesRequestMutex.Lock()
	defer fake.listServicesRequestMutex.Unlock()
	fake.ListServicesRequestStub = nil
	fake.listServicesRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.ListServicesOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServicesRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.ListServicesOutput) {
	fake.listServicesRequestMutex.Lock()
	defer fake.listServicesRequestMutex.Unlock()
	fake.ListServicesRequestStub = nil
	if fake.listServicesRequestReturnsOnCall == nil {
		fake.listServicesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.ListServicesOutput
		})
	}
	fake.listServicesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.ListServicesOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServicesWithContext(arg1 context.Context, arg2 *servicequotas.ListServicesInput, arg3 ...request.Option) (*servicequotas.ListServicesOutput, error) {
	fake.listServicesWithContextMutex.Lock()
	ret, specificReturn := fake.listServicesWithContextReturnsOnCall[len(fake.listServicesWithContextArgsForCall)]
	fake.listServicesWithContextArgsForCall = append(fake.listServicesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.ListServicesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListServicesWithContextStub
	fakeReturns := fake.listServicesWithContextReturns
	fake.recordInvocation("ListServicesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listServicesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) ListServicesWithContextCallCount() int {
	fake.listServicesWithContextMutex.RLock()
	defer fake.listServicesWithContextMutex.RUnlock()
	return len(fake.listServicesWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) ListServicesWithContextCalls(stub func(context.Context, *servicequotas.ListServicesInput, ...request.Option) (*servicequotas.ListServicesOutput, error)) {
	fake.listServicesWithContextMutex.Lock()
	defer fake.listServicesWithContextMutex.Unlock()
	fake.ListServicesWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) ListServicesWithContextArgsForCall(i int) (context.Context, *servicequotas.ListServicesInput, []request.Option) {
	fake.listServicesWithContextMutex.RLock()
	defer fake.listServicesWithContextMutex.RUnlock()
	argsForCall := fake.listServicesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) ListServicesWithContextReturns(result1 *servicequotas.ListServicesOutput, result2 error) {
	fake.listServicesWithContextMutex.Lock()
	defer fake.listServicesWithContextMutex.Unlock()
	fake.ListServicesWithContextStub = nil
	fake.listServicesWithContextReturns = struct {
		result1 *servicequotas.ListServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) ListServicesWithContextReturnsOnCall(i int, result1 *servicequotas.ListServicesOutput, result2 error) {
	fake.listServicesWithContextMutex.Lock()
	defer fake.listServicesWithContextMutex.Unlock()
	fake.ListServicesWithContextStub = nil
	if fake.listServicesWithContextReturnsOnCall == nil {
		fake.listServicesWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.ListServicesOutput
			result2 error
		})
	}
	fake.listServicesWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.ListServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplate(arg1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput) (*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, error) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.Lock()
	ret, specificReturn := fake.putServiceQuotaIncreaseRequestIntoTemplateReturnsOnCall[len(fake.putServiceQuotaIncreaseRequestIntoTemplateArgsForCall)]
	fake.putServiceQuotaIncreaseRequestIntoTemplateArgsForCall = append(fake.putServiceQuotaIncreaseRequestIntoTemplateArgsForCall, struct {
		arg1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput
	}{arg1})
	stub := fake.PutServiceQuotaIncreaseRequestIntoTemplateStub
	fakeReturns := fake.putServiceQuotaIncreaseRequestIntoTemplateReturns
	fake.recordInvocation("PutServiceQuotaIncreaseRequestIntoTemplate", []interface{}{arg1})
	fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateCallCount() int {
	fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.RLock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.RUnlock()
	return len(fake.putServiceQuotaIncreaseRequestIntoTemplateArgsForCall)
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateCalls(stub func(*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput) (*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, error)) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.Lock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.Unlock()
	fake.PutServiceQuotaIncreaseRequestIntoTemplateStub = stub
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateArgsForCall(i int) *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput {
	fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.RLock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.RUnlock()
	argsForCall := fake.putServiceQuotaIncreaseRequestIntoTemplateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateReturns(result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, result2 error) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.Lock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.Unlock()
	fake.PutServiceQuotaIncreaseRequestIntoTemplateStub = nil
	fake.putServiceQuotaIncreaseRequestIntoTemplateReturns = struct {
		result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateReturnsOnCall(i int, result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, result2 error) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.Lock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.Unlock()
	fake.PutServiceQuotaIncreaseRequestIntoTemplateStub = nil
	if fake.putServiceQuotaIncreaseRequestIntoTemplateReturnsOnCall == nil {
		fake.putServiceQuotaIncreaseRequestIntoTemplateReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
			result2 error
		})
	}
	fake.putServiceQuotaIncreaseRequestIntoTemplateReturnsOnCall[i] = struct {
		result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateRequest(arg1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput) (*request.Request, *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.Lock()
	ret, specificReturn := fake.putServiceQuotaIncreaseRequestIntoTemplateRequestReturnsOnCall[len(fake.putServiceQuotaIncreaseRequestIntoTemplateRequestArgsForCall)]
	fake.putServiceQuotaIncreaseRequestIntoTemplateRequestArgsForCall = append(fake.putServiceQuotaIncreaseRequestIntoTemplateRequestArgsForCall, struct {
		arg1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput
	}{arg1})
	stub := fake.PutServiceQuotaIncreaseRequestIntoTemplateRequestStub
	fakeReturns := fake.putServiceQuotaIncreaseRequestIntoTemplateRequestReturns
	fake.recordInvocation("PutServiceQuotaIncreaseRequestIntoTemplateRequest", []interface{}{arg1})
	fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateRequestCallCount() int {
	fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.RLock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.RUnlock()
	return len(fake.putServiceQuotaIncreaseRequestIntoTemplateRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateRequestCalls(stub func(*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput) (*request.Request, *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput)) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.Lock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.Unlock()
	fake.PutServiceQuotaIncreaseRequestIntoTemplateRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateRequestArgsForCall(i int) *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput {
	fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.RLock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.RUnlock()
	argsForCall := fake.putServiceQuotaIncreaseRequestIntoTemplateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateRequestReturns(result1 *request.Request, result2 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.Lock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.Unlock()
	fake.PutServiceQuotaIncreaseRequestIntoTemplateRequestStub = nil
	fake.putServiceQuotaIncreaseRequestIntoTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.Lock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.Unlock()
	fake.PutServiceQuotaIncreaseRequestIntoTemplateRequestStub = nil
	if fake.putServiceQuotaIncreaseRequestIntoTemplateRequestReturnsOnCall == nil {
		fake.putServiceQuotaIncreaseRequestIntoTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
		})
	}
	fake.putServiceQuotaIncreaseRequestIntoTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateWithContext(arg1 context.Context, arg2 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput, arg3 ...request.Option) (*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, error) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextReturnsOnCall[len(fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextArgsForCall)]
	fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextArgsForCall = append(fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutServiceQuotaIncreaseRequestIntoTemplateWithContextStub
	fakeReturns := fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextReturns
	fake.recordInvocation("PutServiceQuotaIncreaseRequestIntoTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateWithContextCallCount() int {
	fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.RLock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.RUnlock()
	return len(fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateWithContextCalls(stub func(context.Context, *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput, ...request.Option) (*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, error)) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.Lock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.Unlock()
	fake.PutServiceQuotaIncreaseRequestIntoTemplateWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateWithContextArgsForCall(i int) (context.Context, *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput, []request.Option) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.RLock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.RUnlock()
	argsForCall := fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateWithContextReturns(result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, result2 error) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.Lock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.Unlock()
	fake.PutServiceQuotaIncreaseRequestIntoTemplateWithContextStub = nil
	fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextReturns = struct {
		result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) PutServiceQuotaIncreaseRequestIntoTemplateWithContextReturnsOnCall(i int, result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, result2 error) {
	fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.Lock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.Unlock()
	fake.PutServiceQuotaIncreaseRequestIntoTemplateWithContextStub = nil
	if fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextReturnsOnCall == nil {
		fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
			result2 error
		})
	}
	fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncrease(arg1 *servicequotas.RequestServiceQuotaIncreaseInput) (*servicequotas.RequestServiceQuotaIncreaseOutput, error) {
	fake.requestServiceQuotaIncreaseMutex.Lock()
	ret, specificReturn := fake.requestServiceQuotaIncreaseReturnsOnCall[len(fake.requestServiceQuotaIncreaseArgsForCall)]
	fake.requestServiceQuotaIncreaseArgsForCall = append(fake.requestServiceQuotaIncreaseArgsForCall, struct {
		arg1 *servicequotas.RequestServiceQuotaIncreaseInput
	}{arg1})
	stub := fake.RequestServiceQuotaIncreaseStub
	fakeReturns := fake.requestServiceQuotaIncreaseReturns
	fake.recordInvocation("RequestServiceQuotaIncrease", []interface{}{arg1})
	fake.requestServiceQuotaIncreaseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseCallCount() int {
	fake.requestServiceQuotaIncreaseMutex.RLock()
	defer fake.requestServiceQuotaIncreaseMutex.RUnlock()
	return len(fake.requestServiceQuotaIncreaseArgsForCall)
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseCalls(stub func(*servicequotas.RequestServiceQuotaIncreaseInput) (*servicequotas.RequestServiceQuotaIncreaseOutput, error)) {
	fake.requestServiceQuotaIncreaseMutex.Lock()
	defer fake.requestServiceQuotaIncreaseMutex.Unlock()
	fake.RequestServiceQuotaIncreaseStub = stub
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseArgsForCall(i int) *servicequotas.RequestServiceQuotaIncreaseInput {
	fake.requestServiceQuotaIncreaseMutex.RLock()
	defer fake.requestServiceQuotaIncreaseMutex.RUnlock()
	argsForCall := fake.requestServiceQuotaIncreaseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseReturns(result1 *servicequotas.RequestServiceQuotaIncreaseOutput, result2 error) {
	fake.requestServiceQuotaIncreaseMutex.Lock()
	defer fake.requestServiceQuotaIncreaseMutex.Unlock()
	fake.RequestServiceQuotaIncreaseStub = nil
	fake.requestServiceQuotaIncreaseReturns = struct {
		result1 *servicequotas.RequestServiceQuotaIncreaseOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseReturnsOnCall(i int, result1 *servicequotas.RequestServiceQuotaIncreaseOutput, result2 error) {
	fake.requestServiceQuotaIncreaseMutex.Lock()
	defer fake.requestServiceQuotaIncreaseMutex.Unlock()
	fake.RequestServiceQuotaIncreaseStub = nil
	if fake.requestServiceQuotaIncreaseReturnsOnCall == nil {
		fake.requestServiceQuotaIncreaseReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.RequestServiceQuotaIncreaseOutput
			result2 error
		})
	}
	fake.requestServiceQuotaIncreaseReturnsOnCall[i] = struct {
		result1 *servicequotas.RequestServiceQuotaIncreaseOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseRequest(arg1 *servicequotas.RequestServiceQuotaIncreaseInput) (*request.Request, *servicequotas.RequestServiceQuotaIncreaseOutput) {
	fake.requestServiceQuotaIncreaseRequestMutex.Lock()
	ret, specificReturn := fake.requestServiceQuotaIncreaseRequestReturnsOnCall[len(fake.requestServiceQuotaIncreaseRequestArgsForCall)]
	fake.requestServiceQuotaIncreaseRequestArgsForCall = append(fake.requestServiceQuotaIncreaseRequestArgsForCall, struct {
		arg1 *servicequotas.RequestServiceQuotaIncreaseInput
	}{arg1})
	stub := fake.RequestServiceQuotaIncreaseRequestStub
	fakeReturns := fake.requestServiceQuotaIncreaseRequestReturns
	fake.recordInvocation("RequestServiceQuotaIncreaseRequest", []interface{}{arg1})
	fake.requestServiceQuotaIncreaseRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseRequestCallCount() int {
	fake.requestServiceQuotaIncreaseRequestMutex.RLock()
	defer fake.requestServiceQuotaIncreaseRequestMutex.RUnlock()
	return len(fake.requestServiceQuotaIncreaseRequestArgsForCall)
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseRequestCalls(stub func(*servicequotas.RequestServiceQuotaIncreaseInput) (*request.Request, *servicequotas.RequestServiceQuotaIncreaseOutput)) {
	fake.requestServiceQuotaIncreaseRequestMutex.Lock()
	defer fake.requestServiceQuotaIncreaseRequestMutex.Unlock()
	fake.RequestServiceQuotaIncreaseRequestStub = stub
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseRequestArgsForCall(i int) *servicequotas.RequestServiceQuotaIncreaseInput {
	fake.requestServiceQuotaIncreaseRequestMutex.RLock()
	defer fake.requestServiceQuotaIncreaseRequestMutex.RUnlock()
	argsForCall := fake.requestServiceQuotaIncreaseRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseRequestReturns(result1 *request.Request, result2 *servicequotas.RequestServiceQuotaIncreaseOutput) {
	fake.requestServiceQuotaIncreaseRequestMutex.Lock()
	defer fake.requestServiceQuotaIncreaseRequestMutex.Unlock()
	fake.RequestServiceQuotaIncreaseRequestStub = nil
	fake.requestServiceQuotaIncreaseRequestReturns = struct {
		result1 *request.Request
		result2 *servicequotas.RequestServiceQuotaIncreaseOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseRequestReturnsOnCall(i int, result1 *request.Request, result2 *servicequotas.RequestServiceQuotaIncreaseOutput) {
	fake.requestServiceQuotaIncreaseRequestMutex.Lock()
	defer fake.requestServiceQuotaIncreaseRequestMutex.Unlock()
	fake.RequestServiceQuotaIncreaseRequestStub = nil
	if fake.requestServiceQuotaIncreaseRequestReturnsOnCall == nil {
		fake.requestServiceQuotaIncreaseRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *servicequotas.RequestServiceQuotaIncreaseOutput
		})
	}
	fake.requestServiceQuotaIncreaseRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *servicequotas.RequestServiceQuotaIncreaseOutput
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseWithContext(arg1 context.Context, arg2 *servicequotas.RequestServiceQuotaIncreaseInput, arg3 ...request.Option) (*servicequotas.RequestServiceQuotaIncreaseOutput, error) {
	fake.requestServiceQuotaIncreaseWithContextMutex.Lock()
	ret, specificReturn := fake.requestServiceQuotaIncreaseWithContextReturnsOnCall[len(fake.requestServiceQuotaIncreaseWithContextArgsForCall)]
	fake.requestServiceQuotaIncreaseWithContextArgsForCall = append(fake.requestServiceQuotaIncreaseWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *servicequotas.RequestServiceQuotaIncreaseInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RequestServiceQuotaIncreaseWithContextStub
	fakeReturns := fake.requestServiceQuotaIncreaseWithContextReturns
	fake.recordInvocation("RequestServiceQuotaIncreaseWithContext", []interface{}{arg1, arg2, arg3})
	fake.requestServiceQuotaIncreaseWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseWithContextCallCount() int {
	fake.requestServiceQuotaIncreaseWithContextMutex.RLock()
	defer fake.requestServiceQuotaIncreaseWithContextMutex.RUnlock()
	return len(fake.requestServiceQuotaIncreaseWithContextArgsForCall)
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseWithContextCalls(stub func(context.Context, *servicequotas.RequestServiceQuotaIncreaseInput, ...request.Option) (*servicequotas.RequestServiceQuotaIncreaseOutput, error)) {
	fake.requestServiceQuotaIncreaseWithContextMutex.Lock()
	defer fake.requestServiceQuotaIncreaseWithContextMutex.Unlock()
	fake.RequestServiceQuotaIncreaseWithContextStub = stub
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseWithContextArgsForCall(i int) (context.Context, *servicequotas.RequestServiceQuotaIncreaseInput, []request.Option) {
	fake.requestServiceQuotaIncreaseWithContextMutex.RLock()
	defer fake.requestServiceQuotaIncreaseWithContextMutex.RUnlock()
	argsForCall := fake.requestServiceQuotaIncreaseWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseWithContextReturns(result1 *servicequotas.RequestServiceQuotaIncreaseOutput, result2 error) {
	fake.requestServiceQuotaIncreaseWithContextMutex.Lock()
	defer fake.requestServiceQuotaIncreaseWithContextMutex.Unlock()
	fake.RequestServiceQuotaIncreaseWithContextStub = nil
	fake.requestServiceQuotaIncreaseWithContextReturns = struct {
		result1 *servicequotas.RequestServiceQuotaIncreaseOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) RequestServiceQuotaIncreaseWithContextReturnsOnCall(i int, result1 *servicequotas.RequestServiceQuotaIncreaseOutput, result2 error) {
	fake.requestServiceQuotaIncreaseWithContextMutex.Lock()
	defer fake.requestServiceQuotaIncreaseWithContextMutex.Unlock()
	fake.RequestServiceQuotaIncreaseWithContextStub = nil
	if fake.requestServiceQuotaIncreaseWithContextReturnsOnCall == nil {
		fake.requestServiceQuotaIncreaseWithContextReturnsOnCall = make(map[int]struct {
			result1 *servicequotas.RequestServiceQuotaIncreaseOutput
			result2 error
		})
	}
	fake.requestServiceQuotaIncreaseWithContextReturnsOnCall[i] = struct {
		result1 *servicequotas.RequestServiceQuotaIncreaseOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceQuotasAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.associateServiceQuotaTemplateMutex.RLock()
	defer fake.associateServiceQuotaTemplateMutex.RUnlock()
	fake.associateServiceQuotaTemplateRequestMutex.RLock()
	defer fake.associateServiceQuotaTemplateRequestMutex.RUnlock()
	fake.associateServiceQuotaTemplateWithContextMutex.RLock()
	defer fake.associateServiceQuotaTemplateWithContextMutex.RUnlock()
	fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.RLock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateMutex.RUnlock()
	fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.RLock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateRequestMutex.RUnlock()
	fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RLock()
	defer fake.deleteServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RUnlock()
	fake.disassociateServiceQuotaTemplateMutex.RLock()
	defer fake.disassociateServiceQuotaTemplateMutex.RUnlock()
	fake.disassociateServiceQuotaTemplateRequestMutex.RLock()
	defer fake.disassociateServiceQuotaTemplateRequestMutex.RUnlock()
	fake.disassociateServiceQuotaTemplateWithContextMutex.RLock()
	defer fake.disassociateServiceQuotaTemplateWithContextMutex.RUnlock()
	fake.getAWSDefaultServiceQuotaMutex.RLock()
	defer fake.getAWSDefaultServiceQuotaMutex.RUnlock()
	fake.getAWSDefaultServiceQuotaRequestMutex.RLock()
	defer fake.getAWSDefaultServiceQuotaRequestMutex.RUnlock()
	fake.getAWSDefaultServiceQuotaWithContextMutex.RLock()
	defer fake.getAWSDefaultServiceQuotaWithContextMutex.RUnlock()
	fake.getAssociationForServiceQuotaTemplateMutex.RLock()
	defer fake.getAssociationForServiceQuotaTemplateMutex.RUnlock()
	fake.getAssociationForServiceQuotaTemplateRequestMutex.RLock()
	defer fake.getAssociationForServiceQuotaTemplateRequestMutex.RUnlock()
	fake.getAssociationForServiceQuotaTemplateWithContextMutex.RLock()
	defer fake.getAssociationForServiceQuotaTemplateWithContextMutex.RUnlock()
	fake.getRequestedServiceQuotaChangeMutex.RLock()
	defer fake.getRequestedServiceQuotaChangeMutex.RUnlock()
	fake.getRequestedServiceQuotaChangeRequestMutex.RLock()
	defer fake.getRequestedServiceQuotaChangeRequestMutex.RUnlock()
	fake.getRequestedServiceQuotaChangeWithContextMutex.RLock()
	defer fake.getRequestedServiceQuotaChangeWithContextMutex.RUnlock()
	fake.getServiceQuotaMutex.RLock()
	defer fake.getServiceQuotaMutex.RUnlock()
	fake.getServiceQuotaIncreaseRequestFromTemplateMutex.RLock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateMutex.RUnlock()
	fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.RLock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateRequestMutex.RUnlock()
	fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RLock()
	defer fake.getServiceQuotaIncreaseRequestFromTemplateWithContextMutex.RUnlock()
	fake.getServiceQuotaRequestMutex.RLock()
	defer fake.getServiceQuotaRequestMutex.RUnlock()
	fake.getServiceQuotaWithContextMutex.RLock()
	defer fake.getServiceQuotaWithContextMutex.RUnlock()
	fake.listAWSDefaultServiceQuotasMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasMutex.RUnlock()
	fake.listAWSDefaultServiceQuotasPagesMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasPagesMutex.RUnlock()
	fake.listAWSDefaultServiceQuotasPagesWithContextMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasPagesWithContextMutex.RUnlock()
	fake.listAWSDefaultServiceQuotasRequestMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasRequestMutex.RUnlock()
	fake.listAWSDefaultServiceQuotasWithContextMutex.RLock()
	defer fake.listAWSDefaultServiceQuotasWithContextMutex.RUnlock()
	fake.listRequestedServiceQuotaChangeHistoryMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryMutex.RUnlock()
	fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaMutex.RUnlock()
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesMutex.RUnlock()
	fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaPagesWithContextMutex.RUnlock()
	fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaRequestMutex.RUnlock()
	fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryByQuotaWithContextMutex.RUnlock()
	fake.listRequestedServiceQuotaChangeHistoryPagesMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesMutex.RUnlock()
	fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryPagesWithContextMutex.RUnlock()
	fake.listRequestedServiceQuotaChangeHistoryRequestMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryRequestMutex.RUnlock()
	fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.RLock()
	defer fake.listRequestedServiceQuotaChangeHistoryWithContextMutex.RUnlock()
	fake.listServiceQuotaIncreaseRequestsInTemplateMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateMutex.RUnlock()
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesMutex.RUnlock()
	fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplatePagesWithContextMutex.RUnlock()
	fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateRequestMutex.RUnlock()
	fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.RLock()
	defer fake.listServiceQuotaIncreaseRequestsInTemplateWithContextMutex.RUnlock()
	fake.listServiceQuotasMutex.RLock()
	defer fake.listServiceQuotasMutex.RUnlock()
	fake.listServiceQuotasPagesMutex.RLock()
	defer fake.listServiceQuotasPagesMutex.RUnlock()
	fake.listServiceQuotasPagesWithContextMutex.RLock()
	defer fake.listServiceQuotasPagesWithContextMutex.RUnlock()
	fake.listServiceQuotasRequestMutex.RLock()
	defer fake.listServiceQuotasRequestMutex.RUnlock()
	fake.listServiceQuotasWithContextMutex.RLock()
	defer fake.listServiceQuotasWithContextMutex.RUnlock()
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	fake.listServicesPagesMutex.RLock()
	defer fake.listServicesPagesMutex.RUnlock()
	fake.listServicesPagesWithContextMutex.RLock()
	defer fake.listServicesPagesWithContextMutex.RUnlock()
	fake.listServicesRequestMutex.RLock()
	defer fake.listServicesRequestMutex.RUnlock()
	fake.listServicesWithContextMutex.RLock()
	defer fake.listServicesWithContextMutex.RUnlock()
	fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.RLock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateMutex.RUnlock()
	fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.RLock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateRequestMutex.RUnlock()
	fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.RLock()
	defer fake.putServiceQuotaIncreaseRequestIntoTemplateWithContextMutex.RUnlock()
	fake.requestServiceQuotaIncreaseMutex.RLock()
	defer fake.requestServiceQuotaIncreaseMutex.RUnlock()
	fake.requestServiceQuotaIncreaseRequestMutex.RLock()
	defer fake.requestServiceQuotaIncreaseRequestMutex.RUnlock()
	fake.requestServiceQuotaIncreaseWithContextMutex.RLock()
	defer fake.requestServiceQuotaIncreaseWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceQuotasAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ servicequotasiface.ServiceQuotasAPI = new(FakeServiceQuotasAPI)
